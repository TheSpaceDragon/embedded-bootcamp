
2021-Firmware-Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000365c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800371c  0800371c  0001371c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003754  08003754  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003754  08003754  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003754  08003754  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003754  08003754  00013754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800375c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000014  08003770  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003770  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e94a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fda  00000000  00000000  0002e986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00030960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00031710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c67  00000000  00000000  000323d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113ba  00000000  00000000  0004c03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096c15  00000000  00000000  0005d3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f400e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b4  00000000  00000000  000f4060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003704 	.word	0x08003704

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003704 	.word	0x08003704

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	; 0x2c
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2414      	movs	r4, #20
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f003 fa5f 	bl	80036f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b34      	ldr	r3, [pc, #208]	; (8000308 <MX_GPIO_Init+0xe8>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b33      	ldr	r3, [pc, #204]	; (8000308 <MX_GPIO_Init+0xe8>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	0309      	lsls	r1, r1, #12
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b30      	ldr	r3, [pc, #192]	; (8000308 <MX_GPIO_Init+0xe8>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	031b      	lsls	r3, r3, #12
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
 8000250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000252:	4b2d      	ldr	r3, [pc, #180]	; (8000308 <MX_GPIO_Init+0xe8>)
 8000254:	695a      	ldr	r2, [r3, #20]
 8000256:	4b2c      	ldr	r3, [pc, #176]	; (8000308 <MX_GPIO_Init+0xe8>)
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	03c9      	lsls	r1, r1, #15
 800025c:	430a      	orrs	r2, r1
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	4b29      	ldr	r3, [pc, #164]	; (8000308 <MX_GPIO_Init+0xe8>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	03db      	lsls	r3, r3, #15
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	4b26      	ldr	r3, [pc, #152]	; (8000308 <MX_GPIO_Init+0xe8>)
 8000270:	695a      	ldr	r2, [r3, #20]
 8000272:	4b25      	ldr	r3, [pc, #148]	; (8000308 <MX_GPIO_Init+0xe8>)
 8000274:	2180      	movs	r1, #128	; 0x80
 8000276:	0289      	lsls	r1, r1, #10
 8000278:	430a      	orrs	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
 800027c:	4b22      	ldr	r3, [pc, #136]	; (8000308 <MX_GPIO_Init+0xe8>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028a:	4b1f      	ldr	r3, [pc, #124]	; (8000308 <MX_GPIO_Init+0xe8>)
 800028c:	695a      	ldr	r2, [r3, #20]
 800028e:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <MX_GPIO_Init+0xe8>)
 8000290:	2180      	movs	r1, #128	; 0x80
 8000292:	02c9      	lsls	r1, r1, #11
 8000294:	430a      	orrs	r2, r1
 8000296:	615a      	str	r2, [r3, #20]
 8000298:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <MX_GPIO_Init+0xe8>)
 800029a:	695a      	ldr	r2, [r3, #20]
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	02db      	lsls	r3, r3, #11
 80002a0:	4013      	ands	r3, r2
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002a6:	2390      	movs	r3, #144	; 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2200      	movs	r2, #0
 80002ac:	2120      	movs	r1, #32
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 fe30 	bl	8000f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	2280      	movs	r2, #128	; 0x80
 80002b8:	0192      	lsls	r2, r2, #6
 80002ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2284      	movs	r2, #132	; 0x84
 80002c0:	0392      	lsls	r2, r2, #14
 80002c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ca:	193b      	adds	r3, r7, r4
 80002cc:	4a0f      	ldr	r2, [pc, #60]	; (800030c <MX_GPIO_Init+0xec>)
 80002ce:	0019      	movs	r1, r3
 80002d0:	0010      	movs	r0, r2
 80002d2:	f000 fca7 	bl	8000c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002d6:	0021      	movs	r1, r4
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2220      	movs	r2, #32
 80002dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2201      	movs	r2, #1
 80002e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002f0:	187a      	adds	r2, r7, r1
 80002f2:	2390      	movs	r3, #144	; 0x90
 80002f4:	05db      	lsls	r3, r3, #23
 80002f6:	0011      	movs	r1, r2
 80002f8:	0018      	movs	r0, r3
 80002fa:	f000 fc93 	bl	8000c24 <HAL_GPIO_Init>

}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	46bd      	mov	sp, r7
 8000302:	b00b      	add	sp, #44	; 0x2c
 8000304:	bd90      	pop	{r4, r7, pc}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	40021000 	.word	0x40021000
 800030c:	48000800 	.word	0x48000800

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fb49 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f843 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f7ff ff7f 	bl	8000220 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000322:	f000 fa9d 	bl	8000860 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000326:	f000 f895 	bl	8000454 <MX_SPI1_Init>
  MX_TIM1_Init();
 800032a:	f000 f983 	bl	8000634 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET); // Sets the Chip Select as High (Default state)
 800032e:	2380      	movs	r3, #128	; 0x80
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	4816      	ldr	r0, [pc, #88]	; (800038c <main+0x7c>)
 8000334:	2201      	movs	r2, #1
 8000336:	0019      	movs	r1, r3
 8000338:	f000 fdec 	bl	8000f14 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET); // Chip Select is set to  low starting the SPI communication.
 800033c:	2380      	movs	r3, #128	; 0x80
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	4812      	ldr	r0, [pc, #72]	; (800038c <main+0x7c>)
 8000342:	2200      	movs	r2, #0
 8000344:	0019      	movs	r1, r3
 8000346:	f000 fde5 	bl	8000f14 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, &transmit_data, &receive_data, sizeof(receive_data), timeout_length); // Send transmit data and listen for 250ms to receive some data.
 800034a:	4b11      	ldr	r3, [pc, #68]	; (8000390 <main+0x80>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a11      	ldr	r2, [pc, #68]	; (8000394 <main+0x84>)
 8000350:	4911      	ldr	r1, [pc, #68]	; (8000398 <main+0x88>)
 8000352:	4812      	ldr	r0, [pc, #72]	; (800039c <main+0x8c>)
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2303      	movs	r3, #3
 8000358:	f001 fcb0 	bl	8001cbc <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET); // Chip Select is set to high to indicate the end of the SPI communication.
 800035c:	2380      	movs	r3, #128	; 0x80
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	480a      	ldr	r0, [pc, #40]	; (800038c <main+0x7c>)
 8000362:	2201      	movs	r2, #1
 8000364:	0019      	movs	r1, r3
 8000366:	f000 fdd5 	bl	8000f14 <HAL_GPIO_WritePin>

	  // Nothing is in the first byte of received data.

	  adc_data = ((uint16_t) receive_data[1] << 8) | (uint16_t) receive_data[2]; // Bit shifts the leading 8 bits by 8bits, then ORs it with the remaining 2 bits in the second index
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <main+0x84>)
 800036c:	785b      	ldrb	r3, [r3, #1]
 800036e:	021b      	lsls	r3, r3, #8
 8000370:	b21a      	sxth	r2, r3
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <main+0x84>)
 8000374:	789b      	ldrb	r3, [r3, #2]
 8000376:	b21b      	sxth	r3, r3
 8000378:	4313      	orrs	r3, r2
 800037a:	b21b      	sxth	r3, r3
 800037c:	b29a      	uxth	r2, r3
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <main+0x90>)
 8000380:	801a      	strh	r2, [r3, #0]
	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 // Connects the separated data.

	  // Now ADC output can be processed

	  HAL_Delay(10);
 8000382:	200a      	movs	r0, #10
 8000384:	f000 fb76 	bl	8000a74 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET); // Chip Select is set to  low starting the SPI communication.
 8000388:	e7d8      	b.n	800033c <main+0x2c>
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	48000400 	.word	0x48000400
 8000390:	20000004 	.word	0x20000004
 8000394:	20000030 	.word	0x20000030
 8000398:	20000000 	.word	0x20000000
 800039c:	20000038 	.word	0x20000038
 80003a0:	20000034 	.word	0x20000034

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b590      	push	{r4, r7, lr}
 80003a6:	b099      	sub	sp, #100	; 0x64
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	242c      	movs	r4, #44	; 0x2c
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	0018      	movs	r0, r3
 80003b0:	2334      	movs	r3, #52	; 0x34
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f003 f99d 	bl	80036f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ba:	231c      	movs	r3, #28
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	0018      	movs	r0, r3
 80003c0:	2310      	movs	r3, #16
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f003 f995 	bl	80036f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ca:	003b      	movs	r3, r7
 80003cc:	0018      	movs	r0, r3
 80003ce:	231c      	movs	r3, #28
 80003d0:	001a      	movs	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	f003 f98e 	bl	80036f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	2220      	movs	r2, #32
 80003dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003de:	193b      	adds	r3, r7, r4
 80003e0:	2201      	movs	r2, #1
 80003e2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ea:	193b      	adds	r3, r7, r4
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 fdaf 	bl	8000f50 <HAL_RCC_OscConfig>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x56>
  {
    Error_Handler();
 80003f6:	f000 f828 	bl	800044a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fa:	211c      	movs	r1, #28
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2207      	movs	r2, #7
 8000400:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2203      	movs	r2, #3
 8000406:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2200      	movs	r2, #0
 8000412:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2101      	movs	r1, #1
 8000418:	0018      	movs	r0, r3
 800041a:	f001 f91f 	bl	800165c <HAL_RCC_ClockConfig>
 800041e:	1e03      	subs	r3, r0, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000422:	f000 f812 	bl	800044a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000426:	003b      	movs	r3, r7
 8000428:	2202      	movs	r2, #2
 800042a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800042c:	003b      	movs	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000432:	003b      	movs	r3, r7
 8000434:	0018      	movs	r0, r3
 8000436:	f001 fa8b 	bl	8001950 <HAL_RCCEx_PeriphCLKConfig>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800043e:	f000 f804 	bl	800044a <Error_Handler>
  }
}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b019      	add	sp, #100	; 0x64
 8000448:	bd90      	pop	{r4, r7, pc}

0800044a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044e:	b672      	cpsid	i
}
 8000450:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000452:	e7fe      	b.n	8000452 <Error_Handler+0x8>

08000454 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_SPI1_Init+0x74>)
 800045a:	4a1c      	ldr	r2, [pc, #112]	; (80004cc <MX_SPI1_Init+0x78>)
 800045c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <MX_SPI1_Init+0x74>)
 8000460:	2282      	movs	r2, #130	; 0x82
 8000462:	0052      	lsls	r2, r2, #1
 8000464:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000466:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <MX_SPI1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800046c:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <MX_SPI1_Init+0x74>)
 800046e:	22e0      	movs	r2, #224	; 0xe0
 8000470:	00d2      	lsls	r2, r2, #3
 8000472:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <MX_SPI1_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <MX_SPI1_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_SPI1_Init+0x74>)
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	0092      	lsls	r2, r2, #2
 8000486:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_SPI1_Init+0x74>)
 800048a:	2218      	movs	r2, #24
 800048c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_SPI1_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_SPI1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <MX_SPI1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_SPI1_Init+0x74>)
 80004a2:	2207      	movs	r2, #7
 80004a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <MX_SPI1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_SPI1_Init+0x74>)
 80004ae:	2208      	movs	r2, #8
 80004b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <MX_SPI1_Init+0x74>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fb49 	bl	8001b4c <HAL_SPI_Init>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004be:	f7ff ffc4 	bl	800044a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000038 	.word	0x20000038
 80004cc:	40013000 	.word	0x40013000

080004d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b08b      	sub	sp, #44	; 0x2c
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	2414      	movs	r4, #20
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	0018      	movs	r0, r3
 80004de:	2314      	movs	r3, #20
 80004e0:	001a      	movs	r2, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	f003 f906 	bl	80036f4 <memset>
  if(spiHandle->Instance==SPI1)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a2e      	ldr	r2, [pc, #184]	; (80005a8 <HAL_SPI_MspInit+0xd8>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d155      	bne.n	800059e <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004f2:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <HAL_SPI_MspInit+0xdc>)
 80004f4:	699a      	ldr	r2, [r3, #24]
 80004f6:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <HAL_SPI_MspInit+0xdc>)
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	0149      	lsls	r1, r1, #5
 80004fc:	430a      	orrs	r2, r1
 80004fe:	619a      	str	r2, [r3, #24]
 8000500:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <HAL_SPI_MspInit+0xdc>)
 8000502:	699a      	ldr	r2, [r3, #24]
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	015b      	lsls	r3, r3, #5
 8000508:	4013      	ands	r3, r2
 800050a:	613b      	str	r3, [r7, #16]
 800050c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b27      	ldr	r3, [pc, #156]	; (80005ac <HAL_SPI_MspInit+0xdc>)
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	4b26      	ldr	r3, [pc, #152]	; (80005ac <HAL_SPI_MspInit+0xdc>)
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	0289      	lsls	r1, r1, #10
 8000518:	430a      	orrs	r2, r1
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	4b23      	ldr	r3, [pc, #140]	; (80005ac <HAL_SPI_MspInit+0xdc>)
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	029b      	lsls	r3, r3, #10
 8000524:	4013      	ands	r3, r2
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <HAL_SPI_MspInit+0xdc>)
 800052c:	695a      	ldr	r2, [r3, #20]
 800052e:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <HAL_SPI_MspInit+0xdc>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	02c9      	lsls	r1, r1, #11
 8000534:	430a      	orrs	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <HAL_SPI_MspInit+0xdc>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	02db      	lsls	r3, r3, #11
 8000540:	4013      	ands	r3, r2
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	22c0      	movs	r2, #192	; 0xc0
 800054a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	2202      	movs	r2, #2
 8000550:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2203      	movs	r2, #3
 800055c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	193a      	adds	r2, r7, r4
 8000566:	2390      	movs	r3, #144	; 0x90
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fb59 	bl	8000c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000572:	0021      	movs	r1, r4
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2208      	movs	r2, #8
 8000578:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2202      	movs	r2, #2
 800057e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2203      	movs	r2, #3
 800058a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000592:	187b      	adds	r3, r7, r1
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_SPI_MspInit+0xe0>)
 8000596:	0019      	movs	r1, r3
 8000598:	0010      	movs	r0, r2
 800059a:	f000 fb43 	bl	8000c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b00b      	add	sp, #44	; 0x2c
 80005a4:	bd90      	pop	{r4, r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	40013000 	.word	0x40013000
 80005ac:	40021000 	.word	0x40021000
 80005b0:	48000400 	.word	0x48000400

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_MspInit+0x44>)
 80005bc:	699a      	ldr	r2, [r3, #24]
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <HAL_MspInit+0x44>)
 80005c0:	2101      	movs	r1, #1
 80005c2:	430a      	orrs	r2, r1
 80005c4:	619a      	str	r2, [r3, #24]
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_MspInit+0x44>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	2201      	movs	r2, #1
 80005cc:	4013      	ands	r3, r2
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_MspInit+0x44>)
 80005d4:	69da      	ldr	r2, [r3, #28]
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_MspInit+0x44>)
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	0549      	lsls	r1, r1, #21
 80005dc:	430a      	orrs	r2, r1
 80005de:	61da      	str	r2, [r3, #28]
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <HAL_MspInit+0x44>)
 80005e2:	69da      	ldr	r2, [r3, #28]
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	055b      	lsls	r3, r3, #21
 80005e8:	4013      	ands	r3, r2
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b002      	add	sp, #8
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	40021000 	.word	0x40021000

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <NMI_Handler+0x4>

08000602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <HardFault_Handler+0x4>

08000608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800060c:	46c0      	nop			; (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000620:	f000 fa0c 	bl	8000a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b096      	sub	sp, #88	; 0x58
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	2348      	movs	r3, #72	; 0x48
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	0018      	movs	r0, r3
 8000640:	2310      	movs	r3, #16
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f003 f855 	bl	80036f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064a:	2340      	movs	r3, #64	; 0x40
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	0018      	movs	r0, r3
 8000650:	2308      	movs	r3, #8
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f003 f84d 	bl	80036f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065a:	2324      	movs	r3, #36	; 0x24
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	0018      	movs	r0, r3
 8000660:	231c      	movs	r3, #28
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f003 f845 	bl	80036f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	0018      	movs	r0, r3
 800066e:	2320      	movs	r3, #32
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f003 f83e 	bl	80036f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000678:	4b46      	ldr	r3, [pc, #280]	; (8000794 <MX_TIM1_Init+0x160>)
 800067a:	4a47      	ldr	r2, [pc, #284]	; (8000798 <MX_TIM1_Init+0x164>)
 800067c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 800067e:	4b45      	ldr	r3, [pc, #276]	; (8000794 <MX_TIM1_Init+0x160>)
 8000680:	2210      	movs	r2, #16
 8000682:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b43      	ldr	r3, [pc, #268]	; (8000794 <MX_TIM1_Init+0x160>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 800068a:	4b42      	ldr	r3, [pc, #264]	; (8000794 <MX_TIM1_Init+0x160>)
 800068c:	4a43      	ldr	r2, [pc, #268]	; (800079c <MX_TIM1_Init+0x168>)
 800068e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000690:	4b40      	ldr	r3, [pc, #256]	; (8000794 <MX_TIM1_Init+0x160>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000696:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <MX_TIM1_Init+0x160>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069c:	4b3d      	ldr	r3, [pc, #244]	; (8000794 <MX_TIM1_Init+0x160>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006a2:	4b3c      	ldr	r3, [pc, #240]	; (8000794 <MX_TIM1_Init+0x160>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fe51 	bl	800234c <HAL_TIM_Base_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80006ae:	f7ff fecc 	bl	800044a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b2:	2148      	movs	r1, #72	; 0x48
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	0152      	lsls	r2, r2, #5
 80006ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006bc:	187a      	adds	r2, r7, r1
 80006be:	4b35      	ldr	r3, [pc, #212]	; (8000794 <MX_TIM1_Init+0x160>)
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 ffb0 	bl	8002628 <HAL_TIM_ConfigClockSource>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80006cc:	f7ff febd 	bl	800044a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <MX_TIM1_Init+0x160>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fe8a 	bl	80023ec <HAL_TIM_PWM_Init>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80006dc:	f7ff feb5 	bl	800044a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e0:	2140      	movs	r1, #64	; 0x40
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ee:	187a      	adds	r2, r7, r1
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <MX_TIM1_Init+0x160>)
 80006f2:	0011      	movs	r1, r2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f002 fb81 	bl	8002dfc <HAL_TIMEx_MasterConfigSynchronization>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80006fe:	f7ff fea4 	bl	800044a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000702:	2124      	movs	r1, #36	; 0x24
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2260      	movs	r2, #96	; 0x60
 8000708:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800072e:	1879      	adds	r1, r7, r1
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_TIM1_Init+0x160>)
 8000732:	2200      	movs	r2, #0
 8000734:	0018      	movs	r0, r3
 8000736:	f001 feb1 	bl	800249c <HAL_TIM_PWM_ConfigChannel>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800073e:	f7ff fe84 	bl	800044a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2280      	movs	r2, #128	; 0x80
 8000764:	0192      	lsls	r2, r2, #6
 8000766:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800076e:	1d3a      	adds	r2, r7, #4
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_TIM1_Init+0x160>)
 8000772:	0011      	movs	r1, r2
 8000774:	0018      	movs	r0, r3
 8000776:	f002 fb9f 	bl	8002eb8 <HAL_TIMEx_ConfigBreakDeadTime>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800077e:	f7ff fe64 	bl	800044a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <MX_TIM1_Init+0x160>)
 8000784:	0018      	movs	r0, r3
 8000786:	f000 f82b 	bl	80007e0 <HAL_TIM_MspPostInit>

}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b016      	add	sp, #88	; 0x58
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	2000009c 	.word	0x2000009c
 8000798:	40012c00 	.word	0x40012c00
 800079c:	0000ea60 	.word	0x0000ea60

080007a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <HAL_TIM_Base_MspInit+0x38>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d10d      	bne.n	80007ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_TIM_Base_MspInit+0x3c>)
 80007b4:	699a      	ldr	r2, [r3, #24]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_TIM_Base_MspInit+0x3c>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0109      	lsls	r1, r1, #4
 80007bc:	430a      	orrs	r2, r1
 80007be:	619a      	str	r2, [r3, #24]
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_TIM_Base_MspInit+0x3c>)
 80007c2:	699a      	ldr	r2, [r3, #24]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	011b      	lsls	r3, r3, #4
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b004      	add	sp, #16
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40012c00 	.word	0x40012c00
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b089      	sub	sp, #36	; 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	240c      	movs	r4, #12
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	0018      	movs	r0, r3
 80007ee:	2314      	movs	r3, #20
 80007f0:	001a      	movs	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f002 ff7e 	bl	80036f4 <memset>
  if(timHandle->Instance==TIM1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a16      	ldr	r2, [pc, #88]	; (8000858 <HAL_TIM_MspPostInit+0x78>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d125      	bne.n	800084e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <HAL_TIM_MspPostInit+0x7c>)
 8000804:	695a      	ldr	r2, [r3, #20]
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_TIM_MspPostInit+0x7c>)
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	0289      	lsls	r1, r1, #10
 800080c:	430a      	orrs	r2, r1
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_TIM_MspPostInit+0x7c>)
 8000812:	695a      	ldr	r2, [r3, #20]
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	029b      	lsls	r3, r3, #10
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	0021      	movs	r1, r4
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2202      	movs	r2, #2
 800082c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2202      	movs	r2, #2
 800083e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	187a      	adds	r2, r7, r1
 8000842:	2390      	movs	r3, #144	; 0x90
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	0011      	movs	r1, r2
 8000848:	0018      	movs	r0, r3
 800084a:	f000 f9eb 	bl	8000c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b009      	add	sp, #36	; 0x24
 8000854:	bd90      	pop	{r4, r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40012c00 	.word	0x40012c00
 800085c:	40021000 	.word	0x40021000

08000860 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000866:	4a15      	ldr	r2, [pc, #84]	; (80008bc <MX_USART2_UART_Init+0x5c>)
 8000868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 800086c:	2296      	movs	r2, #150	; 0x96
 800086e:	0212      	lsls	r2, r2, #8
 8000870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 fb65 	bl	8002f74 <HAL_UART_Init>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ae:	f7ff fdcc 	bl	800044a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000e4 	.word	0x200000e4
 80008bc:	40004400 	.word	0x40004400

080008c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b08b      	sub	sp, #44	; 0x2c
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	2414      	movs	r4, #20
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	0018      	movs	r0, r3
 80008ce:	2314      	movs	r3, #20
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f002 ff0e 	bl	80036f4 <memset>
  if(uartHandle->Instance==USART2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a1c      	ldr	r2, [pc, #112]	; (8000950 <HAL_UART_MspInit+0x90>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d132      	bne.n	8000948 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <HAL_UART_MspInit+0x94>)
 80008e4:	69da      	ldr	r2, [r3, #28]
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <HAL_UART_MspInit+0x94>)
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	0289      	lsls	r1, r1, #10
 80008ec:	430a      	orrs	r2, r1
 80008ee:	61da      	str	r2, [r3, #28]
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <HAL_UART_MspInit+0x94>)
 80008f2:	69da      	ldr	r2, [r3, #28]
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	029b      	lsls	r3, r3, #10
 80008f8:	4013      	ands	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_UART_MspInit+0x94>)
 8000900:	695a      	ldr	r2, [r3, #20]
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_UART_MspInit+0x94>)
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	0289      	lsls	r1, r1, #10
 8000908:	430a      	orrs	r2, r1
 800090a:	615a      	str	r2, [r3, #20]
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_UART_MspInit+0x94>)
 800090e:	695a      	ldr	r2, [r3, #20]
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	029b      	lsls	r3, r3, #10
 8000914:	4013      	ands	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800091a:	0021      	movs	r1, r4
 800091c:	187b      	adds	r3, r7, r1
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2202      	movs	r2, #2
 8000926:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2201      	movs	r2, #1
 8000938:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	187a      	adds	r2, r7, r1
 800093c:	2390      	movs	r3, #144	; 0x90
 800093e:	05db      	lsls	r3, r3, #23
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f000 f96e 	bl	8000c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b00b      	add	sp, #44	; 0x2c
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	40004400 	.word	0x40004400
 8000954:	40021000 	.word	0x40021000

08000958 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800095a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 800095e:	490e      	ldr	r1, [pc, #56]	; (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <LoopForever+0xe>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000974:	4c0b      	ldr	r4, [pc, #44]	; (80009a4 <LoopForever+0x16>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000982:	f7ff fe52 	bl	800062a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000986:	f002 fe91 	bl	80036ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098a:	f7ff fcc1 	bl	8000310 <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
  ldr   r0, =_estack
 8000990:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800099c:	0800375c 	.word	0x0800375c
  ldr r2, =_sbss
 80009a0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009a4:	2000016c 	.word	0x2000016c

080009a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_COMP_IRQHandler>
	...

080009ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <HAL_Init+0x24>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_Init+0x24>)
 80009b6:	2110      	movs	r1, #16
 80009b8:	430a      	orrs	r2, r1
 80009ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f809 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c2:	f7ff fdf7 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_InitTick+0x5c>)
 80009de:	681c      	ldr	r4, [r3, #0]
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <HAL_InitTick+0x60>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	0019      	movs	r1, r3
 80009e6:	23fa      	movs	r3, #250	; 0xfa
 80009e8:	0098      	lsls	r0, r3, #2
 80009ea:	f7ff fb8d 	bl	8000108 <__udivsi3>
 80009ee:	0003      	movs	r3, r0
 80009f0:	0019      	movs	r1, r3
 80009f2:	0020      	movs	r0, r4
 80009f4:	f7ff fb88 	bl	8000108 <__udivsi3>
 80009f8:	0003      	movs	r3, r0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 f905 	bl	8000c0a <HAL_SYSTICK_Config>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e00f      	b.n	8000a28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d80b      	bhi.n	8000a26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	2301      	movs	r3, #1
 8000a12:	425b      	negs	r3, r3
 8000a14:	2200      	movs	r2, #0
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 f8e2 	bl	8000be0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_InitTick+0x64>)
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b003      	add	sp, #12
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000010 	.word	0x20000010
 8000a38:	2000000c 	.word	0x2000000c

08000a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_IncTick+0x1c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	001a      	movs	r2, r3
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_IncTick+0x20>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	18d2      	adds	r2, r2, r3
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <HAL_IncTick+0x20>)
 8000a4e:	601a      	str	r2, [r3, #0]
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	20000010 	.word	0x20000010
 8000a5c:	20000168 	.word	0x20000168

08000a60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;
 8000a64:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <HAL_GetTick+0x10>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	0018      	movs	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	20000168 	.word	0x20000168

08000a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a7c:	f7ff fff0 	bl	8000a60 <HAL_GetTick>
 8000a80:	0003      	movs	r3, r0
 8000a82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	d005      	beq.n	8000a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_Delay+0x44>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	001a      	movs	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	189b      	adds	r3, r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	f7ff ffe0 	bl	8000a60 <HAL_GetTick>
 8000aa0:	0002      	movs	r2, r0
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d8f7      	bhi.n	8000a9c <HAL_Delay+0x28>
  {
  }
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b004      	add	sp, #16
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	20000010 	.word	0x20000010

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	0002      	movs	r2, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b7f      	cmp	r3, #127	; 0x7f
 8000ad0:	d828      	bhi.n	8000b24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad2:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <__NVIC_SetPriority+0xd4>)
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b25b      	sxtb	r3, r3
 8000ada:	089b      	lsrs	r3, r3, #2
 8000adc:	33c0      	adds	r3, #192	; 0xc0
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	589b      	ldr	r3, [r3, r2]
 8000ae2:	1dfa      	adds	r2, r7, #7
 8000ae4:	7812      	ldrb	r2, [r2, #0]
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	2203      	movs	r2, #3
 8000aea:	400a      	ands	r2, r1
 8000aec:	00d2      	lsls	r2, r2, #3
 8000aee:	21ff      	movs	r1, #255	; 0xff
 8000af0:	4091      	lsls	r1, r2
 8000af2:	000a      	movs	r2, r1
 8000af4:	43d2      	mvns	r2, r2
 8000af6:	401a      	ands	r2, r3
 8000af8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	019b      	lsls	r3, r3, #6
 8000afe:	22ff      	movs	r2, #255	; 0xff
 8000b00:	401a      	ands	r2, r3
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	0018      	movs	r0, r3
 8000b08:	2303      	movs	r3, #3
 8000b0a:	4003      	ands	r3, r0
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b10:	481f      	ldr	r0, [pc, #124]	; (8000b90 <__NVIC_SetPriority+0xd4>)
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	089b      	lsrs	r3, r3, #2
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	33c0      	adds	r3, #192	; 0xc0
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b22:	e031      	b.n	8000b88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b24:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <__NVIC_SetPriority+0xd8>)
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	400b      	ands	r3, r1
 8000b30:	3b08      	subs	r3, #8
 8000b32:	089b      	lsrs	r3, r3, #2
 8000b34:	3306      	adds	r3, #6
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	18d3      	adds	r3, r2, r3
 8000b3a:	3304      	adds	r3, #4
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	1dfa      	adds	r2, r7, #7
 8000b40:	7812      	ldrb	r2, [r2, #0]
 8000b42:	0011      	movs	r1, r2
 8000b44:	2203      	movs	r2, #3
 8000b46:	400a      	ands	r2, r1
 8000b48:	00d2      	lsls	r2, r2, #3
 8000b4a:	21ff      	movs	r1, #255	; 0xff
 8000b4c:	4091      	lsls	r1, r2
 8000b4e:	000a      	movs	r2, r1
 8000b50:	43d2      	mvns	r2, r2
 8000b52:	401a      	ands	r2, r3
 8000b54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	019b      	lsls	r3, r3, #6
 8000b5a:	22ff      	movs	r2, #255	; 0xff
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	0018      	movs	r0, r3
 8000b64:	2303      	movs	r3, #3
 8000b66:	4003      	ands	r3, r0
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <__NVIC_SetPriority+0xd8>)
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	001c      	movs	r4, r3
 8000b74:	230f      	movs	r3, #15
 8000b76:	4023      	ands	r3, r4
 8000b78:	3b08      	subs	r3, #8
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	3306      	adds	r3, #6
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	18c3      	adds	r3, r0, r3
 8000b84:	3304      	adds	r3, #4
 8000b86:	601a      	str	r2, [r3, #0]
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b003      	add	sp, #12
 8000b8e:	bd90      	pop	{r4, r7, pc}
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	1e5a      	subs	r2, r3, #1
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	045b      	lsls	r3, r3, #17
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d301      	bcc.n	8000bb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bac:	2301      	movs	r3, #1
 8000bae:	e010      	b.n	8000bd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <SysTick_Config+0x44>)
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	3a01      	subs	r2, #1
 8000bb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb8:	2301      	movs	r3, #1
 8000bba:	425b      	negs	r3, r3
 8000bbc:	2103      	movs	r1, #3
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff ff7c 	bl	8000abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <SysTick_Config+0x44>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SysTick_Config+0x44>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b002      	add	sp, #8
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	210f      	movs	r1, #15
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	1c02      	adds	r2, r0, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff ff5d 	bl	8000abc <__NVIC_SetPriority>
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff ffbf 	bl	8000b98 <SysTick_Config>
 8000c1a:	0003      	movs	r3, r0
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c32:	e155      	b.n	8000ee0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2101      	movs	r1, #1
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	000a      	movs	r2, r1
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d100      	bne.n	8000c4c <HAL_GPIO_Init+0x28>
 8000c4a:	e146      	b.n	8000eda <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2203      	movs	r2, #3
 8000c52:	4013      	ands	r3, r2
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d005      	beq.n	8000c64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d130      	bne.n	8000cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	2203      	movs	r2, #3
 8000c70:	409a      	lsls	r2, r3
 8000c72:	0013      	movs	r3, r2
 8000c74:	43da      	mvns	r2, r3
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	409a      	lsls	r2, r3
 8000c86:	0013      	movs	r3, r2
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	0013      	movs	r3, r2
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	091b      	lsrs	r3, r3, #4
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	0013      	movs	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2203      	movs	r2, #3
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d017      	beq.n	8000d02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	2203      	movs	r2, #3
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	0013      	movs	r3, r2
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2203      	movs	r2, #3
 8000d08:	4013      	ands	r3, r2
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d123      	bne.n	8000d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	08da      	lsrs	r2, r3, #3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3208      	adds	r2, #8
 8000d16:	0092      	lsls	r2, r2, #2
 8000d18:	58d3      	ldr	r3, [r2, r3]
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	2207      	movs	r2, #7
 8000d20:	4013      	ands	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	220f      	movs	r2, #15
 8000d26:	409a      	lsls	r2, r3
 8000d28:	0013      	movs	r3, r2
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	691a      	ldr	r2, [r3, #16]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	2107      	movs	r1, #7
 8000d3a:	400b      	ands	r3, r1
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	409a      	lsls	r2, r3
 8000d40:	0013      	movs	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	08da      	lsrs	r2, r3, #3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3208      	adds	r2, #8
 8000d50:	0092      	lsls	r2, r2, #2
 8000d52:	6939      	ldr	r1, [r7, #16]
 8000d54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	43da      	mvns	r2, r3
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2203      	movs	r2, #3
 8000d74:	401a      	ands	r2, r3
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	23c0      	movs	r3, #192	; 0xc0
 8000d90:	029b      	lsls	r3, r3, #10
 8000d92:	4013      	ands	r3, r2
 8000d94:	d100      	bne.n	8000d98 <HAL_GPIO_Init+0x174>
 8000d96:	e0a0      	b.n	8000eda <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d98:	4b57      	ldr	r3, [pc, #348]	; (8000ef8 <HAL_GPIO_Init+0x2d4>)
 8000d9a:	699a      	ldr	r2, [r3, #24]
 8000d9c:	4b56      	ldr	r3, [pc, #344]	; (8000ef8 <HAL_GPIO_Init+0x2d4>)
 8000d9e:	2101      	movs	r1, #1
 8000da0:	430a      	orrs	r2, r1
 8000da2:	619a      	str	r2, [r3, #24]
 8000da4:	4b54      	ldr	r3, [pc, #336]	; (8000ef8 <HAL_GPIO_Init+0x2d4>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	2201      	movs	r2, #1
 8000daa:	4013      	ands	r3, r2
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000db0:	4a52      	ldr	r2, [pc, #328]	; (8000efc <HAL_GPIO_Init+0x2d8>)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	3302      	adds	r3, #2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	589b      	ldr	r3, [r3, r2]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	0013      	movs	r3, r2
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	2390      	movs	r3, #144	; 0x90
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d019      	beq.n	8000e12 <HAL_GPIO_Init+0x1ee>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a47      	ldr	r2, [pc, #284]	; (8000f00 <HAL_GPIO_Init+0x2dc>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d013      	beq.n	8000e0e <HAL_GPIO_Init+0x1ea>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a46      	ldr	r2, [pc, #280]	; (8000f04 <HAL_GPIO_Init+0x2e0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d00d      	beq.n	8000e0a <HAL_GPIO_Init+0x1e6>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a45      	ldr	r2, [pc, #276]	; (8000f08 <HAL_GPIO_Init+0x2e4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d007      	beq.n	8000e06 <HAL_GPIO_Init+0x1e2>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a44      	ldr	r2, [pc, #272]	; (8000f0c <HAL_GPIO_Init+0x2e8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d101      	bne.n	8000e02 <HAL_GPIO_Init+0x1de>
 8000dfe:	2304      	movs	r3, #4
 8000e00:	e008      	b.n	8000e14 <HAL_GPIO_Init+0x1f0>
 8000e02:	2305      	movs	r3, #5
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x1f0>
 8000e06:	2303      	movs	r3, #3
 8000e08:	e004      	b.n	8000e14 <HAL_GPIO_Init+0x1f0>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e002      	b.n	8000e14 <HAL_GPIO_Init+0x1f0>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <HAL_GPIO_Init+0x1f0>
 8000e12:	2300      	movs	r3, #0
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	2103      	movs	r1, #3
 8000e18:	400a      	ands	r2, r1
 8000e1a:	0092      	lsls	r2, r2, #2
 8000e1c:	4093      	lsls	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e24:	4935      	ldr	r1, [pc, #212]	; (8000efc <HAL_GPIO_Init+0x2d8>)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	089b      	lsrs	r3, r3, #2
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e32:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	025b      	lsls	r3, r3, #9
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e56:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	43da      	mvns	r2, r3
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	029b      	lsls	r3, r3, #10
 8000e74:	4013      	ands	r3, r2
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e86:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	035b      	lsls	r3, r3, #13
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	43da      	mvns	r2, r3
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	039b      	lsls	r3, r3, #14
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_GPIO_Init+0x2ec>)
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	40da      	lsrs	r2, r3
 8000ee8:	1e13      	subs	r3, r2, #0
 8000eea:	d000      	beq.n	8000eee <HAL_GPIO_Init+0x2ca>
 8000eec:	e6a2      	b.n	8000c34 <HAL_GPIO_Init+0x10>
  } 
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b006      	add	sp, #24
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000
 8000f00:	48000400 	.word	0x48000400
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48000c00 	.word	0x48000c00
 8000f0c:	48001000 	.word	0x48001000
 8000f10:	40010400 	.word	0x40010400

08000f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	0008      	movs	r0, r1
 8000f1e:	0011      	movs	r1, r2
 8000f20:	1cbb      	adds	r3, r7, #2
 8000f22:	1c02      	adds	r2, r0, #0
 8000f24:	801a      	strh	r2, [r3, #0]
 8000f26:	1c7b      	adds	r3, r7, #1
 8000f28:	1c0a      	adds	r2, r1, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f2c:	1c7b      	adds	r3, r7, #1
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d004      	beq.n	8000f3e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f34:	1cbb      	adds	r3, r7, #2
 8000f36:	881a      	ldrh	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f3c:	e003      	b.n	8000f46 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f3e:	1cbb      	adds	r3, r7, #2
 8000f40:	881a      	ldrh	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d102      	bne.n	8000f64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f000 fb76 	bl	8001650 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d100      	bne.n	8000f70 <HAL_RCC_OscConfig+0x20>
 8000f6e:	e08e      	b.n	800108e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f70:	4bc5      	ldr	r3, [pc, #788]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	220c      	movs	r2, #12
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d00e      	beq.n	8000f9a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f7c:	4bc2      	ldr	r3, [pc, #776]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	220c      	movs	r2, #12
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d117      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x68>
 8000f88:	4bbf      	ldr	r3, [pc, #764]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	23c0      	movs	r3, #192	; 0xc0
 8000f8e:	025b      	lsls	r3, r3, #9
 8000f90:	401a      	ands	r2, r3
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	025b      	lsls	r3, r3, #9
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d10e      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9a:	4bbb      	ldr	r3, [pc, #748]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	029b      	lsls	r3, r3, #10
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d100      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x58>
 8000fa6:	e071      	b.n	800108c <HAL_RCC_OscConfig+0x13c>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d000      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x62>
 8000fb0:	e06c      	b.n	800108c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f000 fb4c 	bl	8001650 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d107      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x80>
 8000fc0:	4bb1      	ldr	r3, [pc, #708]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4bb0      	ldr	r3, [pc, #704]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	0249      	lsls	r1, r1, #9
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e02f      	b.n	8001030 <HAL_RCC_OscConfig+0xe0>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10c      	bne.n	8000ff2 <HAL_RCC_OscConfig+0xa2>
 8000fd8:	4bab      	ldr	r3, [pc, #684]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4baa      	ldr	r3, [pc, #680]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8000fde:	49ab      	ldr	r1, [pc, #684]	; (800128c <HAL_RCC_OscConfig+0x33c>)
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	4ba8      	ldr	r3, [pc, #672]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4ba7      	ldr	r3, [pc, #668]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8000fea:	49a9      	ldr	r1, [pc, #676]	; (8001290 <HAL_RCC_OscConfig+0x340>)
 8000fec:	400a      	ands	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e01e      	b.n	8001030 <HAL_RCC_OscConfig+0xe0>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b05      	cmp	r3, #5
 8000ff8:	d10e      	bne.n	8001018 <HAL_RCC_OscConfig+0xc8>
 8000ffa:	4ba3      	ldr	r3, [pc, #652]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4ba2      	ldr	r3, [pc, #648]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	02c9      	lsls	r1, r1, #11
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	4b9f      	ldr	r3, [pc, #636]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b9e      	ldr	r3, [pc, #632]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	0249      	lsls	r1, r1, #9
 8001012:	430a      	orrs	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	e00b      	b.n	8001030 <HAL_RCC_OscConfig+0xe0>
 8001018:	4b9b      	ldr	r3, [pc, #620]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b9a      	ldr	r3, [pc, #616]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800101e:	499b      	ldr	r1, [pc, #620]	; (800128c <HAL_RCC_OscConfig+0x33c>)
 8001020:	400a      	ands	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	4b98      	ldr	r3, [pc, #608]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b97      	ldr	r3, [pc, #604]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800102a:	4999      	ldr	r1, [pc, #612]	; (8001290 <HAL_RCC_OscConfig+0x340>)
 800102c:	400a      	ands	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d014      	beq.n	8001062 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fd12 	bl	8000a60 <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001042:	f7ff fd0d 	bl	8000a60 <HAL_GetTick>
 8001046:	0002      	movs	r2, r0
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b64      	cmp	r3, #100	; 0x64
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e2fd      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001054:	4b8c      	ldr	r3, [pc, #560]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	029b      	lsls	r3, r3, #10
 800105c:	4013      	ands	r3, r2
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0xf2>
 8001060:	e015      	b.n	800108e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001062:	f7ff fcfd 	bl	8000a60 <HAL_GetTick>
 8001066:	0003      	movs	r3, r0
 8001068:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800106c:	f7ff fcf8 	bl	8000a60 <HAL_GetTick>
 8001070:	0002      	movs	r2, r0
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b64      	cmp	r3, #100	; 0x64
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e2e8      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107e:	4b82      	ldr	r3, [pc, #520]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	029b      	lsls	r3, r3, #10
 8001086:	4013      	ands	r3, r2
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x11c>
 800108a:	e000      	b.n	800108e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2202      	movs	r2, #2
 8001094:	4013      	ands	r3, r2
 8001096:	d100      	bne.n	800109a <HAL_RCC_OscConfig+0x14a>
 8001098:	e06c      	b.n	8001174 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800109a:	4b7b      	ldr	r3, [pc, #492]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	220c      	movs	r2, #12
 80010a0:	4013      	ands	r3, r2
 80010a2:	d00e      	beq.n	80010c2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010a4:	4b78      	ldr	r3, [pc, #480]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	220c      	movs	r2, #12
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d11f      	bne.n	80010f0 <HAL_RCC_OscConfig+0x1a0>
 80010b0:	4b75      	ldr	r3, [pc, #468]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	23c0      	movs	r3, #192	; 0xc0
 80010b6:	025b      	lsls	r3, r3, #9
 80010b8:	401a      	ands	r2, r3
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	429a      	cmp	r2, r3
 80010c0:	d116      	bne.n	80010f0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c2:	4b71      	ldr	r3, [pc, #452]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2202      	movs	r2, #2
 80010c8:	4013      	ands	r3, r2
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_OscConfig+0x188>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d001      	beq.n	80010d8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e2bb      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d8:	4b6b      	ldr	r3, [pc, #428]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	22f8      	movs	r2, #248	; 0xf8
 80010de:	4393      	bics	r3, r2
 80010e0:	0019      	movs	r1, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	00da      	lsls	r2, r3, #3
 80010e8:	4b67      	ldr	r3, [pc, #412]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 80010ea:	430a      	orrs	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	e041      	b.n	8001174 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d024      	beq.n	8001142 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f8:	4b63      	ldr	r3, [pc, #396]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b62      	ldr	r3, [pc, #392]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 80010fe:	2101      	movs	r1, #1
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fcac 	bl	8000a60 <HAL_GetTick>
 8001108:	0003      	movs	r3, r0
 800110a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fca7 	bl	8000a60 <HAL_GetTick>
 8001112:	0002      	movs	r2, r0
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e297      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	4b59      	ldr	r3, [pc, #356]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2202      	movs	r2, #2
 8001126:	4013      	ands	r3, r2
 8001128:	d0f1      	beq.n	800110e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	22f8      	movs	r2, #248	; 0xf8
 8001130:	4393      	bics	r3, r2
 8001132:	0019      	movs	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	00da      	lsls	r2, r3, #3
 800113a:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800113c:	430a      	orrs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e018      	b.n	8001174 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001142:	4b51      	ldr	r3, [pc, #324]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b50      	ldr	r3, [pc, #320]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8001148:	2101      	movs	r1, #1
 800114a:	438a      	bics	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fc87 	bl	8000a60 <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001158:	f7ff fc82 	bl	8000a60 <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e272      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2202      	movs	r2, #2
 8001170:	4013      	ands	r3, r2
 8001172:	d1f1      	bne.n	8001158 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2208      	movs	r2, #8
 800117a:	4013      	ands	r3, r2
 800117c:	d036      	beq.n	80011ec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d019      	beq.n	80011ba <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001186:	4b40      	ldr	r3, [pc, #256]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8001188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800118a:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800118c:	2101      	movs	r1, #1
 800118e:	430a      	orrs	r2, r1
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff fc65 	bl	8000a60 <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800119c:	f7ff fc60 	bl	8000a60 <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e250      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ae:	4b36      	ldr	r3, [pc, #216]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	d0f1      	beq.n	800119c <HAL_RCC_OscConfig+0x24c>
 80011b8:	e018      	b.n	80011ec <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ba:	4b33      	ldr	r3, [pc, #204]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 80011bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	438a      	bics	r2, r1
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c6:	f7ff fc4b 	bl	8000a60 <HAL_GetTick>
 80011ca:	0003      	movs	r3, r0
 80011cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d0:	f7ff fc46 	bl	8000a60 <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e236      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	2202      	movs	r2, #2
 80011e8:	4013      	ands	r3, r2
 80011ea:	d1f1      	bne.n	80011d0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2204      	movs	r2, #4
 80011f2:	4013      	ands	r3, r2
 80011f4:	d100      	bne.n	80011f8 <HAL_RCC_OscConfig+0x2a8>
 80011f6:	e0b5      	b.n	8001364 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f8:	201f      	movs	r0, #31
 80011fa:	183b      	adds	r3, r7, r0
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8001202:	69da      	ldr	r2, [r3, #28]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	055b      	lsls	r3, r3, #21
 8001208:	4013      	ands	r3, r2
 800120a:	d110      	bne.n	800122e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800120e:	69da      	ldr	r2, [r3, #28]
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	0549      	lsls	r1, r1, #21
 8001216:	430a      	orrs	r2, r1
 8001218:	61da      	str	r2, [r3, #28]
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800121c:	69da      	ldr	r2, [r3, #28]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	055b      	lsls	r3, r3, #21
 8001222:	4013      	ands	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001228:	183b      	adds	r3, r7, r0
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_RCC_OscConfig+0x344>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4013      	ands	r3, r2
 8001238:	d11a      	bne.n	8001270 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_RCC_OscConfig+0x344>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_RCC_OscConfig+0x344>)
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	0049      	lsls	r1, r1, #1
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001248:	f7ff fc0a 	bl	8000a60 <HAL_GetTick>
 800124c:	0003      	movs	r3, r0
 800124e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001252:	f7ff fc05 	bl	8000a60 <HAL_GetTick>
 8001256:	0002      	movs	r2, r0
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b64      	cmp	r3, #100	; 0x64
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e1f5      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_RCC_OscConfig+0x344>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4013      	ands	r3, r2
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10f      	bne.n	8001298 <HAL_RCC_OscConfig+0x348>
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800127a:	6a1a      	ldr	r2, [r3, #32]
 800127c:	4b02      	ldr	r3, [pc, #8]	; (8001288 <HAL_RCC_OscConfig+0x338>)
 800127e:	2101      	movs	r1, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	621a      	str	r2, [r3, #32]
 8001284:	e036      	b.n	80012f4 <HAL_RCC_OscConfig+0x3a4>
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	40021000 	.word	0x40021000
 800128c:	fffeffff 	.word	0xfffeffff
 8001290:	fffbffff 	.word	0xfffbffff
 8001294:	40007000 	.word	0x40007000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10c      	bne.n	80012ba <HAL_RCC_OscConfig+0x36a>
 80012a0:	4bca      	ldr	r3, [pc, #808]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80012a2:	6a1a      	ldr	r2, [r3, #32]
 80012a4:	4bc9      	ldr	r3, [pc, #804]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	438a      	bics	r2, r1
 80012aa:	621a      	str	r2, [r3, #32]
 80012ac:	4bc7      	ldr	r3, [pc, #796]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80012ae:	6a1a      	ldr	r2, [r3, #32]
 80012b0:	4bc6      	ldr	r3, [pc, #792]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80012b2:	2104      	movs	r1, #4
 80012b4:	438a      	bics	r2, r1
 80012b6:	621a      	str	r2, [r3, #32]
 80012b8:	e01c      	b.n	80012f4 <HAL_RCC_OscConfig+0x3a4>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b05      	cmp	r3, #5
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x38c>
 80012c2:	4bc2      	ldr	r3, [pc, #776]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80012c4:	6a1a      	ldr	r2, [r3, #32]
 80012c6:	4bc1      	ldr	r3, [pc, #772]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80012c8:	2104      	movs	r1, #4
 80012ca:	430a      	orrs	r2, r1
 80012cc:	621a      	str	r2, [r3, #32]
 80012ce:	4bbf      	ldr	r3, [pc, #764]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80012d0:	6a1a      	ldr	r2, [r3, #32]
 80012d2:	4bbe      	ldr	r3, [pc, #760]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80012d4:	2101      	movs	r1, #1
 80012d6:	430a      	orrs	r2, r1
 80012d8:	621a      	str	r2, [r3, #32]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0x3a4>
 80012dc:	4bbb      	ldr	r3, [pc, #748]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80012de:	6a1a      	ldr	r2, [r3, #32]
 80012e0:	4bba      	ldr	r3, [pc, #744]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80012e2:	2101      	movs	r1, #1
 80012e4:	438a      	bics	r2, r1
 80012e6:	621a      	str	r2, [r3, #32]
 80012e8:	4bb8      	ldr	r3, [pc, #736]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80012ea:	6a1a      	ldr	r2, [r3, #32]
 80012ec:	4bb7      	ldr	r3, [pc, #732]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80012ee:	2104      	movs	r1, #4
 80012f0:	438a      	bics	r2, r1
 80012f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d014      	beq.n	8001326 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fc:	f7ff fbb0 	bl	8000a60 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001304:	e009      	b.n	800131a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	f7ff fbab 	bl	8000a60 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	4aaf      	ldr	r2, [pc, #700]	; (80015d0 <HAL_RCC_OscConfig+0x680>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e19a      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800131a:	4bac      	ldr	r3, [pc, #688]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	2202      	movs	r2, #2
 8001320:	4013      	ands	r3, r2
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x3b6>
 8001324:	e013      	b.n	800134e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001326:	f7ff fb9b 	bl	8000a60 <HAL_GetTick>
 800132a:	0003      	movs	r3, r0
 800132c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132e:	e009      	b.n	8001344 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001330:	f7ff fb96 	bl	8000a60 <HAL_GetTick>
 8001334:	0002      	movs	r2, r0
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	4aa5      	ldr	r2, [pc, #660]	; (80015d0 <HAL_RCC_OscConfig+0x680>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e185      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001344:	4ba1      	ldr	r3, [pc, #644]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	2202      	movs	r2, #2
 800134a:	4013      	ands	r3, r2
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800134e:	231f      	movs	r3, #31
 8001350:	18fb      	adds	r3, r7, r3
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d105      	bne.n	8001364 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001358:	4b9c      	ldr	r3, [pc, #624]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 800135a:	69da      	ldr	r2, [r3, #28]
 800135c:	4b9b      	ldr	r3, [pc, #620]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 800135e:	499d      	ldr	r1, [pc, #628]	; (80015d4 <HAL_RCC_OscConfig+0x684>)
 8001360:	400a      	ands	r2, r1
 8001362:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2210      	movs	r2, #16
 800136a:	4013      	ands	r3, r2
 800136c:	d063      	beq.n	8001436 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d12a      	bne.n	80013cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001376:	4b95      	ldr	r3, [pc, #596]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800137a:	4b94      	ldr	r3, [pc, #592]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 800137c:	2104      	movs	r1, #4
 800137e:	430a      	orrs	r2, r1
 8001380:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001382:	4b92      	ldr	r3, [pc, #584]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001386:	4b91      	ldr	r3, [pc, #580]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001388:	2101      	movs	r1, #1
 800138a:	430a      	orrs	r2, r1
 800138c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7ff fb67 	bl	8000a60 <HAL_GetTick>
 8001392:	0003      	movs	r3, r0
 8001394:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001398:	f7ff fb62 	bl	8000a60 <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e152      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013aa:	4b88      	ldr	r3, [pc, #544]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80013ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ae:	2202      	movs	r2, #2
 80013b0:	4013      	ands	r3, r2
 80013b2:	d0f1      	beq.n	8001398 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013b4:	4b85      	ldr	r3, [pc, #532]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80013b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b8:	22f8      	movs	r2, #248	; 0xf8
 80013ba:	4393      	bics	r3, r2
 80013bc:	0019      	movs	r1, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	00da      	lsls	r2, r3, #3
 80013c4:	4b81      	ldr	r3, [pc, #516]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80013c6:	430a      	orrs	r2, r1
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34
 80013ca:	e034      	b.n	8001436 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	3305      	adds	r3, #5
 80013d2:	d111      	bne.n	80013f8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80013d4:	4b7d      	ldr	r3, [pc, #500]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80013d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d8:	4b7c      	ldr	r3, [pc, #496]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80013da:	2104      	movs	r1, #4
 80013dc:	438a      	bics	r2, r1
 80013de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013e0:	4b7a      	ldr	r3, [pc, #488]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80013e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e4:	22f8      	movs	r2, #248	; 0xf8
 80013e6:	4393      	bics	r3, r2
 80013e8:	0019      	movs	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	00da      	lsls	r2, r3, #3
 80013f0:	4b76      	ldr	r3, [pc, #472]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80013f2:	430a      	orrs	r2, r1
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34
 80013f6:	e01e      	b.n	8001436 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013f8:	4b74      	ldr	r3, [pc, #464]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80013fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013fc:	4b73      	ldr	r3, [pc, #460]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80013fe:	2104      	movs	r1, #4
 8001400:	430a      	orrs	r2, r1
 8001402:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001404:	4b71      	ldr	r3, [pc, #452]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001408:	4b70      	ldr	r3, [pc, #448]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 800140a:	2101      	movs	r1, #1
 800140c:	438a      	bics	r2, r1
 800140e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001410:	f7ff fb26 	bl	8000a60 <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800141a:	f7ff fb21 	bl	8000a60 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e111      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800142c:	4b67      	ldr	r3, [pc, #412]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 800142e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001430:	2202      	movs	r2, #2
 8001432:	4013      	ands	r3, r2
 8001434:	d1f1      	bne.n	800141a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2220      	movs	r2, #32
 800143c:	4013      	ands	r3, r2
 800143e:	d05c      	beq.n	80014fa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001440:	4b62      	ldr	r3, [pc, #392]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	220c      	movs	r2, #12
 8001446:	4013      	ands	r3, r2
 8001448:	2b0c      	cmp	r3, #12
 800144a:	d00e      	beq.n	800146a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800144c:	4b5f      	ldr	r3, [pc, #380]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	220c      	movs	r2, #12
 8001452:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001454:	2b08      	cmp	r3, #8
 8001456:	d114      	bne.n	8001482 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001458:	4b5c      	ldr	r3, [pc, #368]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	23c0      	movs	r3, #192	; 0xc0
 800145e:	025b      	lsls	r3, r3, #9
 8001460:	401a      	ands	r2, r3
 8001462:	23c0      	movs	r3, #192	; 0xc0
 8001464:	025b      	lsls	r3, r3, #9
 8001466:	429a      	cmp	r2, r3
 8001468:	d10b      	bne.n	8001482 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800146a:	4b58      	ldr	r3, [pc, #352]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 800146c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	025b      	lsls	r3, r3, #9
 8001472:	4013      	ands	r3, r2
 8001474:	d040      	beq.n	80014f8 <HAL_RCC_OscConfig+0x5a8>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d03c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e0e6      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d01b      	beq.n	80014c2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800148a:	4b50      	ldr	r3, [pc, #320]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 800148c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148e:	4b4f      	ldr	r3, [pc, #316]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0249      	lsls	r1, r1, #9
 8001494:	430a      	orrs	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fae2 	bl	8000a60 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014a2:	f7ff fadd 	bl	8000a60 <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e0cd      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014b4:	4b45      	ldr	r3, [pc, #276]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80014b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	025b      	lsls	r3, r3, #9
 80014bc:	4013      	ands	r3, r2
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x552>
 80014c0:	e01b      	b.n	80014fa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80014c2:	4b42      	ldr	r3, [pc, #264]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80014c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80014c8:	4943      	ldr	r1, [pc, #268]	; (80015d8 <HAL_RCC_OscConfig+0x688>)
 80014ca:	400a      	ands	r2, r1
 80014cc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fac7 	bl	8000a60 <HAL_GetTick>
 80014d2:	0003      	movs	r3, r0
 80014d4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014d8:	f7ff fac2 	bl	8000a60 <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e0b2      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80014ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	025b      	lsls	r3, r3, #9
 80014f2:	4013      	ands	r3, r2
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x588>
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014f8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d100      	bne.n	8001504 <HAL_RCC_OscConfig+0x5b4>
 8001502:	e0a4      	b.n	800164e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001504:	4b31      	ldr	r3, [pc, #196]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	220c      	movs	r2, #12
 800150a:	4013      	ands	r3, r2
 800150c:	2b08      	cmp	r3, #8
 800150e:	d100      	bne.n	8001512 <HAL_RCC_OscConfig+0x5c2>
 8001510:	e078      	b.n	8001604 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	2b02      	cmp	r3, #2
 8001518:	d14c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151a:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001520:	492e      	ldr	r1, [pc, #184]	; (80015dc <HAL_RCC_OscConfig+0x68c>)
 8001522:	400a      	ands	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fa9b 	bl	8000a60 <HAL_GetTick>
 800152a:	0003      	movs	r3, r0
 800152c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fa96 	bl	8000a60 <HAL_GetTick>
 8001534:	0002      	movs	r2, r0
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e086      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	049b      	lsls	r3, r3, #18
 800154a:	4013      	ands	r3, r2
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800154e:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	220f      	movs	r2, #15
 8001554:	4393      	bics	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 800155e:	430a      	orrs	r2, r1
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <HAL_RCC_OscConfig+0x690>)
 8001568:	4013      	ands	r3, r2
 800156a:	0019      	movs	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	431a      	orrs	r2, r3
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	0449      	lsls	r1, r1, #17
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fa69 	bl	8000a60 <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fa64 	bl	8000a60 <HAL_GetTick>
 8001598:	0002      	movs	r2, r0
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e054      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	049b      	lsls	r3, r3, #18
 80015ae:	4013      	ands	r3, r2
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x644>
 80015b2:	e04c      	b.n	800164e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <HAL_RCC_OscConfig+0x67c>)
 80015ba:	4908      	ldr	r1, [pc, #32]	; (80015dc <HAL_RCC_OscConfig+0x68c>)
 80015bc:	400a      	ands	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fa4e 	bl	8000a60 <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c8:	e015      	b.n	80015f6 <HAL_RCC_OscConfig+0x6a6>
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	40021000 	.word	0x40021000
 80015d0:	00001388 	.word	0x00001388
 80015d4:	efffffff 	.word	0xefffffff
 80015d8:	fffeffff 	.word	0xfffeffff
 80015dc:	feffffff 	.word	0xfeffffff
 80015e0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff fa3c 	bl	8000a60 <HAL_GetTick>
 80015e8:	0002      	movs	r2, r0
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e02c      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_RCC_OscConfig+0x708>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	049b      	lsls	r3, r3, #18
 80015fe:	4013      	ands	r3, r2
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x694>
 8001602:	e024      	b.n	800164e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e01f      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_RCC_OscConfig+0x708>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_RCC_OscConfig+0x708>)
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	23c0      	movs	r3, #192	; 0xc0
 8001620:	025b      	lsls	r3, r3, #9
 8001622:	401a      	ands	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	429a      	cmp	r2, r3
 800162a:	d10e      	bne.n	800164a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	220f      	movs	r2, #15
 8001630:	401a      	ands	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	429a      	cmp	r2, r3
 8001638:	d107      	bne.n	800164a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	23f0      	movs	r3, #240	; 0xf0
 800163e:	039b      	lsls	r3, r3, #14
 8001640:	401a      	ands	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d001      	beq.n	800164e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	0018      	movs	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	b008      	add	sp, #32
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000

0800165c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0bf      	b.n	80017f0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001670:	4b61      	ldr	r3, [pc, #388]	; (80017f8 <HAL_RCC_ClockConfig+0x19c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2201      	movs	r2, #1
 8001676:	4013      	ands	r3, r2
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d911      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b5e      	ldr	r3, [pc, #376]	; (80017f8 <HAL_RCC_ClockConfig+0x19c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2201      	movs	r2, #1
 8001684:	4393      	bics	r3, r2
 8001686:	0019      	movs	r1, r3
 8001688:	4b5b      	ldr	r3, [pc, #364]	; (80017f8 <HAL_RCC_ClockConfig+0x19c>)
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001690:	4b59      	ldr	r3, [pc, #356]	; (80017f8 <HAL_RCC_ClockConfig+0x19c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2201      	movs	r2, #1
 8001696:	4013      	ands	r3, r2
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0a6      	b.n	80017f0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2202      	movs	r2, #2
 80016a8:	4013      	ands	r3, r2
 80016aa:	d015      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2204      	movs	r2, #4
 80016b2:	4013      	ands	r3, r2
 80016b4:	d006      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016b6:	4b51      	ldr	r3, [pc, #324]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 80016bc:	21e0      	movs	r1, #224	; 0xe0
 80016be:	00c9      	lsls	r1, r1, #3
 80016c0:	430a      	orrs	r2, r1
 80016c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c4:	4b4d      	ldr	r3, [pc, #308]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	22f0      	movs	r2, #240	; 0xf0
 80016ca:	4393      	bics	r3, r2
 80016cc:	0019      	movs	r1, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	4b4a      	ldr	r3, [pc, #296]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	d04c      	beq.n	800177c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	4b44      	ldr	r3, [pc, #272]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	029b      	lsls	r3, r3, #10
 80016f2:	4013      	ands	r3, r2
 80016f4:	d120      	bne.n	8001738 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e07a      	b.n	80017f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001702:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	049b      	lsls	r3, r3, #18
 800170a:	4013      	ands	r3, r2
 800170c:	d114      	bne.n	8001738 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e06e      	b.n	80017f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800171a:	4b38      	ldr	r3, [pc, #224]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 800171c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	025b      	lsls	r3, r3, #9
 8001722:	4013      	ands	r3, r2
 8001724:	d108      	bne.n	8001738 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e062      	b.n	80017f0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172a:	4b34      	ldr	r3, [pc, #208]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2202      	movs	r2, #2
 8001730:	4013      	ands	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e05b      	b.n	80017f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001738:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2203      	movs	r2, #3
 800173e:	4393      	bics	r3, r2
 8001740:	0019      	movs	r1, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 8001748:	430a      	orrs	r2, r1
 800174a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800174c:	f7ff f988 	bl	8000a60 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001754:	e009      	b.n	800176a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001756:	f7ff f983 	bl	8000a60 <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	4a27      	ldr	r2, [pc, #156]	; (8001800 <HAL_RCC_ClockConfig+0x1a4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e042      	b.n	80017f0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	220c      	movs	r2, #12
 8001770:	401a      	ands	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	429a      	cmp	r2, r3
 800177a:	d1ec      	bne.n	8001756 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_RCC_ClockConfig+0x19c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	4013      	ands	r3, r2
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d211      	bcs.n	80017ae <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_RCC_ClockConfig+0x19c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2201      	movs	r2, #1
 8001790:	4393      	bics	r3, r2
 8001792:	0019      	movs	r1, r3
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_RCC_ClockConfig+0x19c>)
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_RCC_ClockConfig+0x19c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2201      	movs	r2, #1
 80017a2:	4013      	ands	r3, r2
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e020      	b.n	80017f0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2204      	movs	r2, #4
 80017b4:	4013      	ands	r3, r2
 80017b6:	d009      	beq.n	80017cc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_RCC_ClockConfig+0x1a8>)
 80017be:	4013      	ands	r3, r2
 80017c0:	0019      	movs	r1, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017cc:	f000 f820 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80017d0:	0001      	movs	r1, r0
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_RCC_ClockConfig+0x1a0>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	220f      	movs	r2, #15
 80017da:	4013      	ands	r3, r2
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_RCC_ClockConfig+0x1ac>)
 80017de:	5cd3      	ldrb	r3, [r2, r3]
 80017e0:	000a      	movs	r2, r1
 80017e2:	40da      	lsrs	r2, r3
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1b0>)
 80017e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff f8f3 	bl	80009d4 <HAL_InitTick>
  
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b004      	add	sp, #16
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40022000 	.word	0x40022000
 80017fc:	40021000 	.word	0x40021000
 8001800:	00001388 	.word	0x00001388
 8001804:	fffff8ff 	.word	0xfffff8ff
 8001808:	0800373c 	.word	0x0800373c
 800180c:	20000008 	.word	0x20000008

08001810 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b08f      	sub	sp, #60	; 0x3c
 8001814:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001816:	2314      	movs	r3, #20
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	4a38      	ldr	r2, [pc, #224]	; (80018fc <HAL_RCC_GetSysClockFreq+0xec>)
 800181c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800181e:	c313      	stmia	r3!, {r0, r1, r4}
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4a36      	ldr	r2, [pc, #216]	; (8001900 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001828:	ca13      	ldmia	r2!, {r0, r1, r4}
 800182a:	c313      	stmia	r3!, {r0, r1, r4}
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001834:	2300      	movs	r3, #0
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
 8001838:	2300      	movs	r3, #0
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	220c      	movs	r2, #12
 800184e:	4013      	ands	r3, r2
 8001850:	2b0c      	cmp	r3, #12
 8001852:	d047      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0xd4>
 8001854:	d849      	bhi.n	80018ea <HAL_RCC_GetSysClockFreq+0xda>
 8001856:	2b04      	cmp	r3, #4
 8001858:	d002      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x50>
 800185a:	2b08      	cmp	r3, #8
 800185c:	d003      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0x56>
 800185e:	e044      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001860:	4b29      	ldr	r3, [pc, #164]	; (8001908 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001864:	e044      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	0c9b      	lsrs	r3, r3, #18
 800186a:	220f      	movs	r2, #15
 800186c:	4013      	ands	r3, r2
 800186e:	2214      	movs	r2, #20
 8001870:	18ba      	adds	r2, r7, r2
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001876:	4b23      	ldr	r3, [pc, #140]	; (8001904 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	220f      	movs	r2, #15
 800187c:	4013      	ands	r3, r2
 800187e:	1d3a      	adds	r2, r7, #4
 8001880:	5cd3      	ldrb	r3, [r2, r3]
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001886:	23c0      	movs	r3, #192	; 0xc0
 8001888:	025b      	lsls	r3, r3, #9
 800188a:	401a      	ands	r2, r3
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	429a      	cmp	r2, r3
 8001892:	d109      	bne.n	80018a8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001896:	481c      	ldr	r0, [pc, #112]	; (8001908 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001898:	f7fe fc36 	bl	8000108 <__udivsi3>
 800189c:	0003      	movs	r3, r0
 800189e:	001a      	movs	r2, r3
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	4353      	muls	r3, r2
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
 80018a6:	e01a      	b.n	80018de <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80018a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018aa:	23c0      	movs	r3, #192	; 0xc0
 80018ac:	025b      	lsls	r3, r3, #9
 80018ae:	401a      	ands	r2, r3
 80018b0:	23c0      	movs	r3, #192	; 0xc0
 80018b2:	025b      	lsls	r3, r3, #9
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d109      	bne.n	80018cc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ba:	4814      	ldr	r0, [pc, #80]	; (800190c <HAL_RCC_GetSysClockFreq+0xfc>)
 80018bc:	f7fe fc24 	bl	8000108 <__udivsi3>
 80018c0:	0003      	movs	r3, r0
 80018c2:	001a      	movs	r2, r3
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	4353      	muls	r3, r2
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
 80018ca:	e008      	b.n	80018de <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018d0:	f7fe fc1a 	bl	8000108 <__udivsi3>
 80018d4:	0003      	movs	r3, r0
 80018d6:	001a      	movs	r2, r3
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	4353      	muls	r3, r2
 80018dc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80018de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018e2:	e005      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_GetSysClockFreq+0xfc>)
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018e8:	e002      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80018f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b00f      	add	sp, #60	; 0x3c
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	0800371c 	.word	0x0800371c
 8001900:	0800372c 	.word	0x0800372c
 8001904:	40021000 	.word	0x40021000
 8001908:	007a1200 	.word	0x007a1200
 800190c:	02dc6c00 	.word	0x02dc6c00

08001910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001914:	4b02      	ldr	r3, [pc, #8]	; (8001920 <HAL_RCC_GetHCLKFreq+0x10>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	20000008 	.word	0x20000008

08001924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001928:	f7ff fff2 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 800192c:	0001      	movs	r1, r0
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	2207      	movs	r2, #7
 8001936:	4013      	ands	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_RCC_GetPCLK1Freq+0x28>)
 800193a:	5cd3      	ldrb	r3, [r2, r3]
 800193c:	40d9      	lsrs	r1, r3
 800193e:	000b      	movs	r3, r1
}    
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	40021000 	.word	0x40021000
 800194c:	0800374c 	.word	0x0800374c

08001950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	025b      	lsls	r3, r3, #9
 8001968:	4013      	ands	r3, r2
 800196a:	d100      	bne.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800196c:	e08e      	b.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800196e:	2017      	movs	r0, #23
 8001970:	183b      	adds	r3, r7, r0
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001976:	4b6e      	ldr	r3, [pc, #440]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001978:	69da      	ldr	r2, [r3, #28]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	055b      	lsls	r3, r3, #21
 800197e:	4013      	ands	r3, r2
 8001980:	d110      	bne.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b6b      	ldr	r3, [pc, #428]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001984:	69da      	ldr	r2, [r3, #28]
 8001986:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001988:	2180      	movs	r1, #128	; 0x80
 800198a:	0549      	lsls	r1, r1, #21
 800198c:	430a      	orrs	r2, r1
 800198e:	61da      	str	r2, [r3, #28]
 8001990:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001992:	69da      	ldr	r2, [r3, #28]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	055b      	lsls	r3, r3, #21
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	183b      	adds	r3, r7, r0
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	4b63      	ldr	r3, [pc, #396]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4013      	ands	r3, r2
 80019ae:	d11a      	bne.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b0:	4b60      	ldr	r3, [pc, #384]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	0049      	lsls	r1, r1, #1
 80019ba:	430a      	orrs	r2, r1
 80019bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019be:	f7ff f84f 	bl	8000a60 <HAL_GetTick>
 80019c2:	0003      	movs	r3, r0
 80019c4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c6:	e008      	b.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c8:	f7ff f84a 	bl	8000a60 <HAL_GetTick>
 80019cc:	0002      	movs	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0a6      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4013      	ands	r3, r2
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019e6:	4b52      	ldr	r3, [pc, #328]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019e8:	6a1a      	ldr	r2, [r3, #32]
 80019ea:	23c0      	movs	r3, #192	; 0xc0
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4013      	ands	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d034      	beq.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	23c0      	movs	r3, #192	; 0xc0
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4013      	ands	r3, r2
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d02c      	beq.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a08:	4b49      	ldr	r3, [pc, #292]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4a4a      	ldr	r2, [pc, #296]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a14:	6a1a      	ldr	r2, [r3, #32]
 8001a16:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	0249      	lsls	r1, r1, #9
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a20:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a22:	6a1a      	ldr	r2, [r3, #32]
 8001a24:	4b42      	ldr	r3, [pc, #264]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a26:	4945      	ldr	r1, [pc, #276]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a28:	400a      	ands	r2, r1
 8001a2a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a2c:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4013      	ands	r3, r2
 8001a38:	d013      	beq.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f811 	bl	8000a60 <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a42:	e009      	b.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a44:	f7ff f80c 	bl	8000a60 <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	4a3c      	ldr	r2, [pc, #240]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e067      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a58:	4b35      	ldr	r3, [pc, #212]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a62:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4a34      	ldr	r2, [pc, #208]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4b2f      	ldr	r3, [pc, #188]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a72:	430a      	orrs	r2, r1
 8001a74:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a76:	2317      	movs	r3, #23
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d105      	bne.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a82:	69da      	ldr	r2, [r3, #28]
 8001a84:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a86:	492f      	ldr	r1, [pc, #188]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	4013      	ands	r3, r2
 8001a94:	d009      	beq.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a96:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	4393      	bics	r3, r2
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d009      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2220      	movs	r2, #32
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	4393      	bics	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	029b      	lsls	r3, r3, #10
 8001aee:	4013      	ands	r3, r2
 8001af0:	d009      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001af2:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	4393      	bics	r3, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699a      	ldr	r2, [r3, #24]
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b02:	430a      	orrs	r2, r1
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d009      	beq.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	4393      	bics	r3, r2
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b22:	430a      	orrs	r2, r1
 8001b24:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b006      	add	sp, #24
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40007000 	.word	0x40007000
 8001b38:	fffffcff 	.word	0xfffffcff
 8001b3c:	fffeffff 	.word	0xfffeffff
 8001b40:	00001388 	.word	0x00001388
 8001b44:	efffffff 	.word	0xefffffff
 8001b48:	fffcffff 	.word	0xfffcffff

08001b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0a8      	b.n	8001cb0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	2382      	movs	r3, #130	; 0x82
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d009      	beq.n	8001b86 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	61da      	str	r2, [r3, #28]
 8001b78:	e005      	b.n	8001b86 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	225d      	movs	r2, #93	; 0x5d
 8001b90:	5c9b      	ldrb	r3, [r3, r2]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	225c      	movs	r2, #92	; 0x5c
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f7fe fc94 	bl	80004d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	225d      	movs	r2, #93	; 0x5d
 8001bac:	2102      	movs	r1, #2
 8001bae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2140      	movs	r1, #64	; 0x40
 8001bbc:	438a      	bics	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	23e0      	movs	r3, #224	; 0xe0
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d902      	bls.n	8001bd2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e002      	b.n	8001bd8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	015b      	lsls	r3, r3, #5
 8001bd6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	23f0      	movs	r3, #240	; 0xf0
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d008      	beq.n	8001bf6 <HAL_SPI_Init+0xaa>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	23e0      	movs	r3, #224	; 0xe0
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d002      	beq.n	8001bf6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	2382      	movs	r3, #130	; 0x82
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	401a      	ands	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6899      	ldr	r1, [r3, #8]
 8001c04:	2384      	movs	r3, #132	; 0x84
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	400b      	ands	r3, r1
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2102      	movs	r1, #2
 8001c12:	400b      	ands	r3, r1
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6999      	ldr	r1, [r3, #24]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	400b      	ands	r3, r1
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	2138      	movs	r1, #56	; 0x38
 8001c32:	400b      	ands	r3, r1
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	0011      	movs	r1, r2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	019b      	lsls	r3, r3, #6
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	2110      	movs	r1, #16
 8001c64:	400b      	ands	r3, r1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6c:	2108      	movs	r1, #8
 8001c6e:	400b      	ands	r3, r1
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68d9      	ldr	r1, [r3, #12]
 8001c76:	23f0      	movs	r3, #240	; 0xf0
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	400b      	ands	r3, r1
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	0011      	movs	r1, r2
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	015b      	lsls	r3, r3, #5
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69da      	ldr	r2, [r3, #28]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4907      	ldr	r1, [pc, #28]	; (8001cb8 <HAL_SPI_Init+0x16c>)
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	225d      	movs	r2, #93	; 0x5d
 8001caa:	2101      	movs	r1, #1
 8001cac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b004      	add	sp, #16
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	fffff7ff 	.word	0xfffff7ff

08001cbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	001a      	movs	r2, r3
 8001cca:	1cbb      	adds	r3, r7, #2
 8001ccc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001cd2:	2323      	movs	r3, #35	; 0x23
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	225c      	movs	r2, #92	; 0x5c
 8001cde:	5c9b      	ldrb	r3, [r3, r2]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_SPI_TransmitReceive+0x2c>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e1b5      	b.n	8002054 <HAL_SPI_TransmitReceive+0x398>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	225c      	movs	r2, #92	; 0x5c
 8001cec:	2101      	movs	r1, #1
 8001cee:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cf0:	f7fe feb6 	bl	8000a60 <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001cf8:	201b      	movs	r0, #27
 8001cfa:	183b      	adds	r3, r7, r0
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	215d      	movs	r1, #93	; 0x5d
 8001d00:	5c52      	ldrb	r2, [r2, r1]
 8001d02:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001d0a:	2312      	movs	r3, #18
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	1cba      	adds	r2, r7, #2
 8001d10:	8812      	ldrh	r2, [r2, #0]
 8001d12:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d14:	183b      	adds	r3, r7, r0
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d011      	beq.n	8001d40 <HAL_SPI_TransmitReceive+0x84>
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	2382      	movs	r3, #130	; 0x82
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d107      	bne.n	8001d36 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d103      	bne.n	8001d36 <HAL_SPI_TransmitReceive+0x7a>
 8001d2e:	183b      	adds	r3, r7, r0
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d004      	beq.n	8001d40 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001d36:	2323      	movs	r3, #35	; 0x23
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d3e:	e17e      	b.n	800203e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <HAL_SPI_TransmitReceive+0x98>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_SPI_TransmitReceive+0x98>
 8001d4c:	1cbb      	adds	r3, r7, #2
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d104      	bne.n	8001d5e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001d54:	2323      	movs	r3, #35	; 0x23
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d5c:	e16f      	b.n	800203e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	225d      	movs	r2, #93	; 0x5d
 8001d62:	5c9b      	ldrb	r3, [r3, r2]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d003      	beq.n	8001d72 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	225d      	movs	r2, #93	; 0x5d
 8001d6e:	2105      	movs	r1, #5
 8001d70:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1cba      	adds	r2, r7, #2
 8001d82:	2146      	movs	r1, #70	; 0x46
 8001d84:	8812      	ldrh	r2, [r2, #0]
 8001d86:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1cba      	adds	r2, r7, #2
 8001d8c:	2144      	movs	r1, #68	; 0x44
 8001d8e:	8812      	ldrh	r2, [r2, #0]
 8001d90:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1cba      	adds	r2, r7, #2
 8001d9c:	8812      	ldrh	r2, [r2, #0]
 8001d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1cba      	adds	r2, r7, #2
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	23e0      	movs	r3, #224	; 0xe0
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d908      	bls.n	8001dd2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	49a4      	ldr	r1, [pc, #656]	; (800205c <HAL_SPI_TransmitReceive+0x3a0>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	e008      	b.n	8001de4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	0149      	lsls	r1, r1, #5
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2240      	movs	r2, #64	; 0x40
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b40      	cmp	r3, #64	; 0x40
 8001df0:	d007      	beq.n	8001e02 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2140      	movs	r1, #64	; 0x40
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	23e0      	movs	r3, #224	; 0xe0
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d800      	bhi.n	8001e10 <HAL_SPI_TransmitReceive+0x154>
 8001e0e:	e07f      	b.n	8001f10 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_SPI_TransmitReceive+0x168>
 8001e18:	2312      	movs	r3, #18
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d000      	beq.n	8001e24 <HAL_SPI_TransmitReceive+0x168>
 8001e22:	e069      	b.n	8001ef8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e28:	881a      	ldrh	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e34:	1c9a      	adds	r2, r3, #2
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e48:	e056      	b.n	8001ef8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2202      	movs	r2, #2
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d11b      	bne.n	8001e90 <HAL_SPI_TransmitReceive+0x1d4>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d016      	beq.n	8001e90 <HAL_SPI_TransmitReceive+0x1d4>
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d113      	bne.n	8001e90 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6c:	881a      	ldrh	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e78:	1c9a      	adds	r2, r3, #2
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2201      	movs	r2, #1
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d11c      	bne.n	8001ed8 <HAL_SPI_TransmitReceive+0x21c>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2246      	movs	r2, #70	; 0x46
 8001ea2:	5a9b      	ldrh	r3, [r3, r2]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d016      	beq.n	8001ed8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	1c9a      	adds	r2, r3, #2
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2246      	movs	r2, #70	; 0x46
 8001ec6:	5a9b      	ldrh	r3, [r3, r2]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b299      	uxth	r1, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2246      	movs	r2, #70	; 0x46
 8001ed2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ed8:	f7fe fdc2 	bl	8000a60 <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d807      	bhi.n	8001ef8 <HAL_SPI_TransmitReceive+0x23c>
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eea:	3301      	adds	r3, #1
 8001eec:	d004      	beq.n	8001ef8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8001eee:	2323      	movs	r3, #35	; 0x23
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	701a      	strb	r2, [r3, #0]
        goto error;
 8001ef6:	e0a2      	b.n	800203e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1a3      	bne.n	8001e4a <HAL_SPI_TransmitReceive+0x18e>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2246      	movs	r2, #70	; 0x46
 8001f06:	5a9b      	ldrh	r3, [r3, r2]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d19d      	bne.n	8001e4a <HAL_SPI_TransmitReceive+0x18e>
 8001f0e:	e085      	b.n	800201c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_SPI_TransmitReceive+0x268>
 8001f18:	2312      	movs	r3, #18
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d000      	beq.n	8001f24 <HAL_SPI_TransmitReceive+0x268>
 8001f22:	e070      	b.n	8002006 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	7812      	ldrb	r2, [r2, #0]
 8001f30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f4a:	e05c      	b.n	8002006 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2202      	movs	r2, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d11c      	bne.n	8001f94 <HAL_SPI_TransmitReceive+0x2d8>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d017      	beq.n	8001f94 <HAL_SPI_TransmitReceive+0x2d8>
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d114      	bne.n	8001f94 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	330c      	adds	r3, #12
 8001f74:	7812      	ldrb	r2, [r2, #0]
 8001f76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d11e      	bne.n	8001fe0 <HAL_SPI_TransmitReceive+0x324>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2246      	movs	r2, #70	; 0x46
 8001fa6:	5a9b      	ldrh	r3, [r3, r2]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d018      	beq.n	8001fe0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	330c      	adds	r3, #12
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	7812      	ldrb	r2, [r2, #0]
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2246      	movs	r2, #70	; 0x46
 8001fce:	5a9b      	ldrh	r3, [r3, r2]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b299      	uxth	r1, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2246      	movs	r2, #70	; 0x46
 8001fda:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001fe0:	f7fe fd3e 	bl	8000a60 <HAL_GetTick>
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d802      	bhi.n	8001ff6 <HAL_SPI_TransmitReceive+0x33a>
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	d102      	bne.n	8001ffc <HAL_SPI_TransmitReceive+0x340>
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d104      	bne.n	8002006 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8001ffc:	2323      	movs	r3, #35	; 0x23
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	2203      	movs	r2, #3
 8002002:	701a      	strb	r2, [r3, #0]
        goto error;
 8002004:	e01b      	b.n	800203e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800200a:	b29b      	uxth	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d19d      	bne.n	8001f4c <HAL_SPI_TransmitReceive+0x290>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2246      	movs	r2, #70	; 0x46
 8002014:	5a9b      	ldrh	r3, [r3, r2]
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d197      	bne.n	8001f4c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	0018      	movs	r0, r3
 8002024:	f000 f94c 	bl	80022c0 <SPI_EndRxTxTransaction>
 8002028:	1e03      	subs	r3, r0, #0
 800202a:	d007      	beq.n	800203c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800202c:	2323      	movs	r3, #35	; 0x23
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	661a      	str	r2, [r3, #96]	; 0x60
 800203a:	e000      	b.n	800203e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800203c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	225d      	movs	r2, #93	; 0x5d
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	225c      	movs	r2, #92	; 0x5c
 800204a:	2100      	movs	r1, #0
 800204c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800204e:	2323      	movs	r3, #35	; 0x23
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	781b      	ldrb	r3, [r3, #0]
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	b00a      	add	sp, #40	; 0x28
 800205a:	bd80      	pop	{r7, pc}
 800205c:	ffffefff 	.word	0xffffefff

08002060 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	1dfb      	adds	r3, r7, #7
 800206e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002070:	f7fe fcf6 	bl	8000a60 <HAL_GetTick>
 8002074:	0002      	movs	r2, r0
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	18d3      	adds	r3, r2, r3
 800207e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002080:	f7fe fcee 	bl	8000a60 <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002088:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	015b      	lsls	r3, r3, #5
 800208e:	0d1b      	lsrs	r3, r3, #20
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	4353      	muls	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002096:	e058      	b.n	800214a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	3301      	adds	r3, #1
 800209c:	d055      	beq.n	800214a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800209e:	f7fe fcdf 	bl	8000a60 <HAL_GetTick>
 80020a2:	0002      	movs	r2, r0
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d902      	bls.n	80020b4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d142      	bne.n	800213a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	21e0      	movs	r1, #224	; 0xe0
 80020c0:	438a      	bics	r2, r1
 80020c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	2382      	movs	r3, #130	; 0x82
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d113      	bne.n	80020f8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	429a      	cmp	r2, r3
 80020da:	d005      	beq.n	80020e8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d107      	bne.n	80020f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2140      	movs	r1, #64	; 0x40
 80020f4:	438a      	bics	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	019b      	lsls	r3, r3, #6
 8002100:	429a      	cmp	r2, r3
 8002102:	d110      	bne.n	8002126 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	491a      	ldr	r1, [pc, #104]	; (8002178 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002110:	400a      	ands	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2180      	movs	r1, #128	; 0x80
 8002120:	0189      	lsls	r1, r1, #6
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	225d      	movs	r2, #93	; 0x5d
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	225c      	movs	r2, #92	; 0x5c
 8002132:	2100      	movs	r1, #0
 8002134:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e017      	b.n	800216a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3b01      	subs	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	4013      	ands	r3, r2
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	425a      	negs	r2, r3
 800215a:	4153      	adcs	r3, r2
 800215c:	b2db      	uxtb	r3, r3
 800215e:	001a      	movs	r2, r3
 8002160:	1dfb      	adds	r3, r7, #7
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d197      	bne.n	8002098 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b008      	add	sp, #32
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	20000008 	.word	0x20000008
 8002178:	ffffdfff 	.word	0xffffdfff

0800217c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	; 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800218a:	2317      	movs	r3, #23
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002192:	f7fe fc65 	bl	8000a60 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	18d3      	adds	r3, r2, r3
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80021a2:	f7fe fc5d 	bl	8000a60 <HAL_GetTick>
 80021a6:	0003      	movs	r3, r0
 80021a8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	330c      	adds	r3, #12
 80021b0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80021b2:	4b41      	ldr	r3, [pc, #260]	; (80022b8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	0013      	movs	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	189b      	adds	r3, r3, r2
 80021bc:	00da      	lsls	r2, r3, #3
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	0d1b      	lsrs	r3, r3, #20
 80021c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c4:	4353      	muls	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80021c8:	e068      	b.n	800229c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	23c0      	movs	r3, #192	; 0xc0
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d10a      	bne.n	80021ea <SPI_WaitFifoStateUntilTimeout+0x6e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d107      	bne.n	80021ea <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	2117      	movs	r1, #23
 80021e2:	187b      	adds	r3, r7, r1
 80021e4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	d055      	beq.n	800229c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021f0:	f7fe fc36 	bl	8000a60 <HAL_GetTick>
 80021f4:	0002      	movs	r2, r0
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d902      	bls.n	8002206 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	2b00      	cmp	r3, #0
 8002204:	d142      	bne.n	800228c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	21e0      	movs	r1, #224	; 0xe0
 8002212:	438a      	bics	r2, r1
 8002214:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	2382      	movs	r3, #130	; 0x82
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	429a      	cmp	r2, r3
 8002220:	d113      	bne.n	800224a <SPI_WaitFifoStateUntilTimeout+0xce>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	429a      	cmp	r2, r3
 800222c:	d005      	beq.n	800223a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	429a      	cmp	r2, r3
 8002238:	d107      	bne.n	800224a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2140      	movs	r1, #64	; 0x40
 8002246:	438a      	bics	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	429a      	cmp	r2, r3
 8002254:	d110      	bne.n	8002278 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4916      	ldr	r1, [pc, #88]	; (80022bc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002262:	400a      	ands	r2, r1
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2180      	movs	r1, #128	; 0x80
 8002272:	0189      	lsls	r1, r1, #6
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	225d      	movs	r2, #93	; 0x5d
 800227c:	2101      	movs	r1, #1
 800227e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	225c      	movs	r2, #92	; 0x5c
 8002284:	2100      	movs	r1, #0
 8002286:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e010      	b.n	80022ae <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	3b01      	subs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d18e      	bne.n	80021ca <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	0018      	movs	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b00a      	add	sp, #40	; 0x28
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	20000008 	.word	0x20000008
 80022bc:	ffffdfff 	.word	0xffffdfff

080022c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	23c0      	movs	r3, #192	; 0xc0
 80022d0:	0159      	lsls	r1, r3, #5
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	0013      	movs	r3, r2
 80022da:	2200      	movs	r2, #0
 80022dc:	f7ff ff4e 	bl	800217c <SPI_WaitFifoStateUntilTimeout>
 80022e0:	1e03      	subs	r3, r0, #0
 80022e2:	d007      	beq.n	80022f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e8:	2220      	movs	r2, #32
 80022ea:	431a      	orrs	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e027      	b.n	8002344 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	0013      	movs	r3, r2
 80022fe:	2200      	movs	r2, #0
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	f7ff fead 	bl	8002060 <SPI_WaitFlagStateUntilTimeout>
 8002306:	1e03      	subs	r3, r0, #0
 8002308:	d007      	beq.n	800231a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230e:	2220      	movs	r2, #32
 8002310:	431a      	orrs	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e014      	b.n	8002344 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	23c0      	movs	r3, #192	; 0xc0
 800231e:	00d9      	lsls	r1, r3, #3
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	0013      	movs	r3, r2
 8002328:	2200      	movs	r2, #0
 800232a:	f7ff ff27 	bl	800217c <SPI_WaitFifoStateUntilTimeout>
 800232e:	1e03      	subs	r3, r0, #0
 8002330:	d007      	beq.n	8002342 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002336:	2220      	movs	r2, #32
 8002338:	431a      	orrs	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e000      	b.n	8002344 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	b004      	add	sp, #16
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e042      	b.n	80023e4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	223d      	movs	r2, #61	; 0x3d
 8002362:	5c9b      	ldrb	r3, [r3, r2]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d107      	bne.n	800237a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	223c      	movs	r2, #60	; 0x3c
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0018      	movs	r0, r3
 8002376:	f7fe fa13 	bl	80007a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	223d      	movs	r2, #61	; 0x3d
 800237e:	2102      	movs	r1, #2
 8002380:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3304      	adds	r3, #4
 800238a:	0019      	movs	r1, r3
 800238c:	0010      	movs	r0, r2
 800238e:	f000 fa1f 	bl	80027d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2246      	movs	r2, #70	; 0x46
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	223e      	movs	r2, #62	; 0x3e
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	223f      	movs	r2, #63	; 0x3f
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2240      	movs	r2, #64	; 0x40
 80023ae:	2101      	movs	r1, #1
 80023b0:	5499      	strb	r1, [r3, r2]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2241      	movs	r2, #65	; 0x41
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2242      	movs	r2, #66	; 0x42
 80023be:	2101      	movs	r1, #1
 80023c0:	5499      	strb	r1, [r3, r2]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2243      	movs	r2, #67	; 0x43
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2244      	movs	r2, #68	; 0x44
 80023ce:	2101      	movs	r1, #1
 80023d0:	5499      	strb	r1, [r3, r2]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2245      	movs	r2, #69	; 0x45
 80023d6:	2101      	movs	r1, #1
 80023d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	223d      	movs	r2, #61	; 0x3d
 80023de:	2101      	movs	r1, #1
 80023e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e042      	b.n	8002484 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	223d      	movs	r2, #61	; 0x3d
 8002402:	5c9b      	ldrb	r3, [r3, r2]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d107      	bne.n	800241a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	223c      	movs	r2, #60	; 0x3c
 800240e:	2100      	movs	r1, #0
 8002410:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	0018      	movs	r0, r3
 8002416:	f000 f839 	bl	800248c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	223d      	movs	r2, #61	; 0x3d
 800241e:	2102      	movs	r1, #2
 8002420:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3304      	adds	r3, #4
 800242a:	0019      	movs	r1, r3
 800242c:	0010      	movs	r0, r2
 800242e:	f000 f9cf 	bl	80027d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2246      	movs	r2, #70	; 0x46
 8002436:	2101      	movs	r1, #1
 8002438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	223e      	movs	r2, #62	; 0x3e
 800243e:	2101      	movs	r1, #1
 8002440:	5499      	strb	r1, [r3, r2]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	223f      	movs	r2, #63	; 0x3f
 8002446:	2101      	movs	r1, #1
 8002448:	5499      	strb	r1, [r3, r2]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2240      	movs	r2, #64	; 0x40
 800244e:	2101      	movs	r1, #1
 8002450:	5499      	strb	r1, [r3, r2]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2241      	movs	r2, #65	; 0x41
 8002456:	2101      	movs	r1, #1
 8002458:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2242      	movs	r2, #66	; 0x42
 800245e:	2101      	movs	r1, #1
 8002460:	5499      	strb	r1, [r3, r2]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2243      	movs	r2, #67	; 0x43
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2244      	movs	r2, #68	; 0x44
 800246e:	2101      	movs	r1, #1
 8002470:	5499      	strb	r1, [r3, r2]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2245      	movs	r2, #69	; 0x45
 8002476:	2101      	movs	r1, #1
 8002478:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	223d      	movs	r2, #61	; 0x3d
 800247e:	2101      	movs	r1, #1
 8002480:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a8:	2317      	movs	r3, #23
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	223c      	movs	r2, #60	; 0x3c
 80024b4:	5c9b      	ldrb	r3, [r3, r2]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_TIM_PWM_ConfigChannel+0x22>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e0ad      	b.n	800261a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	223c      	movs	r2, #60	; 0x3c
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	d100      	bne.n	80024ce <HAL_TIM_PWM_ConfigChannel+0x32>
 80024cc:	e076      	b.n	80025bc <HAL_TIM_PWM_ConfigChannel+0x120>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d900      	bls.n	80024d6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80024d4:	e095      	b.n	8002602 <HAL_TIM_PWM_ConfigChannel+0x166>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d04e      	beq.n	800257a <HAL_TIM_PWM_ConfigChannel+0xde>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d900      	bls.n	80024e4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80024e2:	e08e      	b.n	8002602 <HAL_TIM_PWM_ConfigChannel+0x166>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d021      	beq.n	8002534 <HAL_TIM_PWM_ConfigChannel+0x98>
 80024f0:	e087      	b.n	8002602 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	0011      	movs	r1, r2
 80024fa:	0018      	movs	r0, r3
 80024fc:	f000 f9e8 	bl	80028d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2108      	movs	r1, #8
 800250c:	430a      	orrs	r2, r1
 800250e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2104      	movs	r1, #4
 800251c:	438a      	bics	r2, r1
 800251e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6999      	ldr	r1, [r3, #24]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	619a      	str	r2, [r3, #24]
      break;
 8002532:	e06b      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	0011      	movs	r1, r2
 800253c:	0018      	movs	r0, r3
 800253e:	f000 fa4f 	bl	80029e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699a      	ldr	r2, [r3, #24]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0109      	lsls	r1, r1, #4
 8002550:	430a      	orrs	r2, r1
 8002552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4931      	ldr	r1, [pc, #196]	; (8002624 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002560:	400a      	ands	r2, r1
 8002562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6999      	ldr	r1, [r3, #24]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	021a      	lsls	r2, r3, #8
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	619a      	str	r2, [r3, #24]
      break;
 8002578:	e048      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	0011      	movs	r1, r2
 8002582:	0018      	movs	r0, r3
 8002584:	f000 fab0 	bl	8002ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2108      	movs	r1, #8
 8002594:	430a      	orrs	r2, r1
 8002596:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2104      	movs	r1, #4
 80025a4:	438a      	bics	r2, r1
 80025a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69d9      	ldr	r1, [r3, #28]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	61da      	str	r2, [r3, #28]
      break;
 80025ba:	e027      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	0011      	movs	r1, r2
 80025c4:	0018      	movs	r0, r3
 80025c6:	f000 fb15 	bl	8002bf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	0109      	lsls	r1, r1, #4
 80025d8:	430a      	orrs	r2, r1
 80025da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	490f      	ldr	r1, [pc, #60]	; (8002624 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80025e8:	400a      	ands	r2, r1
 80025ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69d9      	ldr	r1, [r3, #28]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	021a      	lsls	r2, r3, #8
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	61da      	str	r2, [r3, #28]
      break;
 8002600:	e004      	b.n	800260c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002602:	2317      	movs	r3, #23
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
      break;
 800260a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	223c      	movs	r2, #60	; 0x3c
 8002610:	2100      	movs	r1, #0
 8002612:	5499      	strb	r1, [r3, r2]

  return status;
 8002614:	2317      	movs	r3, #23
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	781b      	ldrb	r3, [r3, #0]
}
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	b006      	add	sp, #24
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	fffffbff 	.word	0xfffffbff

08002628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002632:	230f      	movs	r3, #15
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	223c      	movs	r2, #60	; 0x3c
 800263e:	5c9b      	ldrb	r3, [r3, r2]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_TIM_ConfigClockSource+0x20>
 8002644:	2302      	movs	r3, #2
 8002646:	e0bc      	b.n	80027c2 <HAL_TIM_ConfigClockSource+0x19a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	223c      	movs	r2, #60	; 0x3c
 800264c:	2101      	movs	r1, #1
 800264e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	223d      	movs	r2, #61	; 0x3d
 8002654:	2102      	movs	r1, #2
 8002656:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2277      	movs	r2, #119	; 0x77
 8002664:	4393      	bics	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	0192      	lsls	r2, r2, #6
 8002680:	4293      	cmp	r3, r2
 8002682:	d040      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0xde>
 8002684:	2280      	movs	r2, #128	; 0x80
 8002686:	0192      	lsls	r2, r2, #6
 8002688:	4293      	cmp	r3, r2
 800268a:	d900      	bls.n	800268e <HAL_TIM_ConfigClockSource+0x66>
 800268c:	e088      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 800268e:	2280      	movs	r2, #128	; 0x80
 8002690:	0152      	lsls	r2, r2, #5
 8002692:	4293      	cmp	r3, r2
 8002694:	d100      	bne.n	8002698 <HAL_TIM_ConfigClockSource+0x70>
 8002696:	e088      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x182>
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	0152      	lsls	r2, r2, #5
 800269c:	4293      	cmp	r3, r2
 800269e:	d900      	bls.n	80026a2 <HAL_TIM_ConfigClockSource+0x7a>
 80026a0:	e07e      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026a2:	2b70      	cmp	r3, #112	; 0x70
 80026a4:	d018      	beq.n	80026d8 <HAL_TIM_ConfigClockSource+0xb0>
 80026a6:	d900      	bls.n	80026aa <HAL_TIM_ConfigClockSource+0x82>
 80026a8:	e07a      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026aa:	2b60      	cmp	r3, #96	; 0x60
 80026ac:	d04f      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x126>
 80026ae:	d900      	bls.n	80026b2 <HAL_TIM_ConfigClockSource+0x8a>
 80026b0:	e076      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026b2:	2b50      	cmp	r3, #80	; 0x50
 80026b4:	d03b      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x106>
 80026b6:	d900      	bls.n	80026ba <HAL_TIM_ConfigClockSource+0x92>
 80026b8:	e072      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	d057      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x146>
 80026be:	d900      	bls.n	80026c2 <HAL_TIM_ConfigClockSource+0x9a>
 80026c0:	e06e      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026c2:	2b30      	cmp	r3, #48	; 0x30
 80026c4:	d063      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x166>
 80026c6:	d86b      	bhi.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d060      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x166>
 80026cc:	d868      	bhi.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d05d      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x166>
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d05b      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x166>
 80026d6:	e063      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f000 fb68 	bl	8002dbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2277      	movs	r2, #119	; 0x77
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	609a      	str	r2, [r3, #8]
      break;
 8002704:	e052      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f000 fb51 	bl	8002dbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	01c9      	lsls	r1, r1, #7
 8002728:	430a      	orrs	r2, r1
 800272a:	609a      	str	r2, [r3, #8]
      break;
 800272c:	e03e      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	001a      	movs	r2, r3
 800273c:	f000 fac4 	bl	8002cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2150      	movs	r1, #80	; 0x50
 8002746:	0018      	movs	r0, r3
 8002748:	f000 fb1e 	bl	8002d88 <TIM_ITRx_SetConfig>
      break;
 800274c:	e02e      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	001a      	movs	r2, r3
 800275c:	f000 fae2 	bl	8002d24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2160      	movs	r1, #96	; 0x60
 8002766:	0018      	movs	r0, r3
 8002768:	f000 fb0e 	bl	8002d88 <TIM_ITRx_SetConfig>
      break;
 800276c:	e01e      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	001a      	movs	r2, r3
 800277c:	f000 faa4 	bl	8002cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2140      	movs	r1, #64	; 0x40
 8002786:	0018      	movs	r0, r3
 8002788:	f000 fafe 	bl	8002d88 <TIM_ITRx_SetConfig>
      break;
 800278c:	e00e      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0019      	movs	r1, r3
 8002798:	0010      	movs	r0, r2
 800279a:	f000 faf5 	bl	8002d88 <TIM_ITRx_SetConfig>
      break;
 800279e:	e005      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80027a0:	230f      	movs	r3, #15
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
      break;
 80027a8:	e000      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80027aa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	223d      	movs	r2, #61	; 0x3d
 80027b0:	2101      	movs	r1, #1
 80027b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	223c      	movs	r2, #60	; 0x3c
 80027b8:	2100      	movs	r1, #0
 80027ba:	5499      	strb	r1, [r3, r2]

  return status;
 80027bc:	230f      	movs	r3, #15
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	781b      	ldrb	r3, [r3, #0]
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b004      	add	sp, #16
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	ffff00ff 	.word	0xffff00ff

080027d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a34      	ldr	r2, [pc, #208]	; (80028b4 <TIM_Base_SetConfig+0xe4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d008      	beq.n	80027fa <TIM_Base_SetConfig+0x2a>
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	05db      	lsls	r3, r3, #23
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d003      	beq.n	80027fa <TIM_Base_SetConfig+0x2a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a30      	ldr	r2, [pc, #192]	; (80028b8 <TIM_Base_SetConfig+0xe8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d108      	bne.n	800280c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2270      	movs	r2, #112	; 0x70
 80027fe:	4393      	bics	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <TIM_Base_SetConfig+0xe4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d018      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	05db      	lsls	r3, r3, #23
 800281a:	429a      	cmp	r2, r3
 800281c:	d013      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a25      	ldr	r2, [pc, #148]	; (80028b8 <TIM_Base_SetConfig+0xe8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00f      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a24      	ldr	r2, [pc, #144]	; (80028bc <TIM_Base_SetConfig+0xec>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00b      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <TIM_Base_SetConfig+0xf0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a22      	ldr	r2, [pc, #136]	; (80028c4 <TIM_Base_SetConfig+0xf4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d003      	beq.n	8002846 <TIM_Base_SetConfig+0x76>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a21      	ldr	r2, [pc, #132]	; (80028c8 <TIM_Base_SetConfig+0xf8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d108      	bne.n	8002858 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4a20      	ldr	r2, [pc, #128]	; (80028cc <TIM_Base_SetConfig+0xfc>)
 800284a:	4013      	ands	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	4393      	bics	r3, r2
 800285e:	001a      	movs	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <TIM_Base_SetConfig+0xe4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00b      	beq.n	800289e <TIM_Base_SetConfig+0xce>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <TIM_Base_SetConfig+0xf0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <TIM_Base_SetConfig+0xce>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <TIM_Base_SetConfig+0xf4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d003      	beq.n	800289e <TIM_Base_SetConfig+0xce>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <TIM_Base_SetConfig+0xf8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d103      	bne.n	80028a6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	615a      	str	r2, [r3, #20]
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b004      	add	sp, #16
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40002000 	.word	0x40002000
 80028c0:	40014000 	.word	0x40014000
 80028c4:	40014400 	.word	0x40014400
 80028c8:	40014800 	.word	0x40014800
 80028cc:	fffffcff 	.word	0xfffffcff

080028d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	2201      	movs	r2, #1
 80028e0:	4393      	bics	r3, r2
 80028e2:	001a      	movs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2270      	movs	r2, #112	; 0x70
 80028fe:	4393      	bics	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2203      	movs	r2, #3
 8002906:	4393      	bics	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2202      	movs	r2, #2
 8002918:	4393      	bics	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <TIM_OC1_SetConfig+0xf8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00b      	beq.n	8002946 <TIM_OC1_SetConfig+0x76>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a26      	ldr	r2, [pc, #152]	; (80029cc <TIM_OC1_SetConfig+0xfc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <TIM_OC1_SetConfig+0x76>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <TIM_OC1_SetConfig+0x100>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_OC1_SetConfig+0x76>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <TIM_OC1_SetConfig+0x104>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10c      	bne.n	8002960 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2208      	movs	r2, #8
 800294a:	4393      	bics	r3, r2
 800294c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2204      	movs	r2, #4
 800295c:	4393      	bics	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <TIM_OC1_SetConfig+0xf8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00b      	beq.n	8002980 <TIM_OC1_SetConfig+0xb0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a18      	ldr	r2, [pc, #96]	; (80029cc <TIM_OC1_SetConfig+0xfc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d007      	beq.n	8002980 <TIM_OC1_SetConfig+0xb0>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <TIM_OC1_SetConfig+0x100>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <TIM_OC1_SetConfig+0xb0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <TIM_OC1_SetConfig+0x104>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d111      	bne.n	80029a4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4a15      	ldr	r2, [pc, #84]	; (80029d8 <TIM_OC1_SetConfig+0x108>)
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4a14      	ldr	r2, [pc, #80]	; (80029dc <TIM_OC1_SetConfig+0x10c>)
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	621a      	str	r2, [r3, #32]
}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b006      	add	sp, #24
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40014000 	.word	0x40014000
 80029d0:	40014400 	.word	0x40014400
 80029d4:	40014800 	.word	0x40014800
 80029d8:	fffffeff 	.word	0xfffffeff
 80029dc:	fffffdff 	.word	0xfffffdff

080029e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	2210      	movs	r2, #16
 80029f0:	4393      	bics	r3, r2
 80029f2:	001a      	movs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <TIM_OC2_SetConfig+0xe8>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <TIM_OC2_SetConfig+0xec>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <TIM_OC2_SetConfig+0xf0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	4393      	bics	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2240      	movs	r2, #64	; 0x40
 8002a5a:	4393      	bics	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <TIM_OC2_SetConfig+0xf0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <TIM_OC2_SetConfig+0x9e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <TIM_OC2_SetConfig+0xf4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <TIM_OC2_SetConfig+0x9e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <TIM_OC2_SetConfig+0xf8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_OC2_SetConfig+0x9e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a18      	ldr	r2, [pc, #96]	; (8002adc <TIM_OC2_SetConfig+0xfc>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d113      	bne.n	8002aa6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4a17      	ldr	r2, [pc, #92]	; (8002ae0 <TIM_OC2_SetConfig+0x100>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4a16      	ldr	r2, [pc, #88]	; (8002ae4 <TIM_OC2_SetConfig+0x104>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	621a      	str	r2, [r3, #32]
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b006      	add	sp, #24
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	ffff8fff 	.word	0xffff8fff
 8002acc:	fffffcff 	.word	0xfffffcff
 8002ad0:	40012c00 	.word	0x40012c00
 8002ad4:	40014000 	.word	0x40014000
 8002ad8:	40014400 	.word	0x40014400
 8002adc:	40014800 	.word	0x40014800
 8002ae0:	fffffbff 	.word	0xfffffbff
 8002ae4:	fffff7ff 	.word	0xfffff7ff

08002ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4a35      	ldr	r2, [pc, #212]	; (8002bcc <TIM_OC3_SetConfig+0xe4>)
 8002af8:	401a      	ands	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2270      	movs	r2, #112	; 0x70
 8002b14:	4393      	bics	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	4393      	bics	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	4a28      	ldr	r2, [pc, #160]	; (8002bd0 <TIM_OC3_SetConfig+0xe8>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <TIM_OC3_SetConfig+0xec>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10d      	bne.n	8002b62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	4a23      	ldr	r2, [pc, #140]	; (8002bd8 <TIM_OC3_SetConfig+0xf0>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <TIM_OC3_SetConfig+0xf4>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <TIM_OC3_SetConfig+0xec>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00b      	beq.n	8002b82 <TIM_OC3_SetConfig+0x9a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <TIM_OC3_SetConfig+0xf8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <TIM_OC3_SetConfig+0x9a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <TIM_OC3_SetConfig+0xfc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d003      	beq.n	8002b82 <TIM_OC3_SetConfig+0x9a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a1a      	ldr	r2, [pc, #104]	; (8002be8 <TIM_OC3_SetConfig+0x100>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d113      	bne.n	8002baa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <TIM_OC3_SetConfig+0x104>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4a18      	ldr	r2, [pc, #96]	; (8002bf0 <TIM_OC3_SetConfig+0x108>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	621a      	str	r2, [r3, #32]
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b006      	add	sp, #24
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	fffffeff 	.word	0xfffffeff
 8002bd0:	fffffdff 	.word	0xfffffdff
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	fffff7ff 	.word	0xfffff7ff
 8002bdc:	fffffbff 	.word	0xfffffbff
 8002be0:	40014000 	.word	0x40014000
 8002be4:	40014400 	.word	0x40014400
 8002be8:	40014800 	.word	0x40014800
 8002bec:	ffffefff 	.word	0xffffefff
 8002bf0:	ffffdfff 	.word	0xffffdfff

08002bf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4a28      	ldr	r2, [pc, #160]	; (8002ca4 <TIM_OC4_SetConfig+0xb0>)
 8002c04:	401a      	ands	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a22      	ldr	r2, [pc, #136]	; (8002ca8 <TIM_OC4_SetConfig+0xb4>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a21      	ldr	r2, [pc, #132]	; (8002cac <TIM_OC4_SetConfig+0xb8>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <TIM_OC4_SetConfig+0xbc>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	031b      	lsls	r3, r3, #12
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <TIM_OC4_SetConfig+0xc0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00b      	beq.n	8002c6c <TIM_OC4_SetConfig+0x78>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <TIM_OC4_SetConfig+0xc4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d007      	beq.n	8002c6c <TIM_OC4_SetConfig+0x78>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a17      	ldr	r2, [pc, #92]	; (8002cbc <TIM_OC4_SetConfig+0xc8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d003      	beq.n	8002c6c <TIM_OC4_SetConfig+0x78>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a16      	ldr	r2, [pc, #88]	; (8002cc0 <TIM_OC4_SetConfig+0xcc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d109      	bne.n	8002c80 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <TIM_OC4_SetConfig+0xd0>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	019b      	lsls	r3, r3, #6
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	621a      	str	r2, [r3, #32]
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b006      	add	sp, #24
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	ffffefff 	.word	0xffffefff
 8002ca8:	ffff8fff 	.word	0xffff8fff
 8002cac:	fffffcff 	.word	0xfffffcff
 8002cb0:	ffffdfff 	.word	0xffffdfff
 8002cb4:	40012c00 	.word	0x40012c00
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	40014400 	.word	0x40014400
 8002cc0:	40014800 	.word	0x40014800
 8002cc4:	ffffbfff 	.word	0xffffbfff

08002cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4393      	bics	r3, r2
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	22f0      	movs	r2, #240	; 0xf0
 8002cf2:	4393      	bics	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	220a      	movs	r2, #10
 8002d04:	4393      	bics	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	621a      	str	r2, [r3, #32]
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b006      	add	sp, #24
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	2210      	movs	r2, #16
 8002d36:	4393      	bics	r3, r2
 8002d38:	001a      	movs	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	; (8002d84 <TIM_TI2_ConfigInputStage+0x60>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	031b      	lsls	r3, r3, #12
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	22a0      	movs	r2, #160	; 0xa0
 8002d60:	4393      	bics	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	621a      	str	r2, [r3, #32]
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b006      	add	sp, #24
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	ffff0fff 	.word	0xffff0fff

08002d88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2270      	movs	r2, #112	; 0x70
 8002d9c:	4393      	bics	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	2207      	movs	r2, #7
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	609a      	str	r2, [r3, #8]
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b004      	add	sp, #16
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <TIM_ETR_SetConfig+0x3c>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	021a      	lsls	r2, r3, #8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b006      	add	sp, #24
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	ffff00ff 	.word	0xffff00ff

08002dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	223c      	movs	r2, #60	; 0x3c
 8002e0a:	5c9b      	ldrb	r3, [r3, r2]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e047      	b.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	223c      	movs	r2, #60	; 0x3c
 8002e18:	2101      	movs	r1, #1
 8002e1a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	223d      	movs	r2, #61	; 0x3d
 8002e20:	2102      	movs	r1, #2
 8002e22:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2270      	movs	r2, #112	; 0x70
 8002e38:	4393      	bics	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00f      	beq.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	05db      	lsls	r3, r3, #23
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d009      	beq.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a11      	ldr	r2, [pc, #68]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d004      	beq.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a10      	ldr	r2, [pc, #64]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d10c      	bne.n	8002e92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2280      	movs	r2, #128	; 0x80
 8002e7c:	4393      	bics	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	223d      	movs	r2, #61	; 0x3d
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	223c      	movs	r2, #60	; 0x3c
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b004      	add	sp, #16
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40014000 	.word	0x40014000

08002eb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	223c      	movs	r2, #60	; 0x3c
 8002eca:	5c9b      	ldrb	r3, [r3, r2]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e03e      	b.n	8002f52 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	223c      	movs	r2, #60	; 0x3c
 8002ed8:	2101      	movs	r1, #1
 8002eda:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	22ff      	movs	r2, #255	; 0xff
 8002ee0:	4393      	bics	r3, r2
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a1b      	ldr	r2, [pc, #108]	; (8002f5c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002efe:	401a      	ands	r2, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002f0c:	401a      	ands	r2, r3
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a13      	ldr	r2, [pc, #76]	; (8002f68 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002f28:	401a      	ands	r2, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002f36:	401a      	ands	r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	223c      	movs	r2, #60	; 0x3c
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	0018      	movs	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b004      	add	sp, #16
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	fffffcff 	.word	0xfffffcff
 8002f60:	fffffbff 	.word	0xfffffbff
 8002f64:	fffff7ff 	.word	0xfffff7ff
 8002f68:	ffffefff 	.word	0xffffefff
 8002f6c:	ffffdfff 	.word	0xffffdfff
 8002f70:	ffffbfff 	.word	0xffffbfff

08002f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e044      	b.n	8003010 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d107      	bne.n	8002f9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2274      	movs	r2, #116	; 0x74
 8002f92:	2100      	movs	r1, #0
 8002f94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f7fd fc91 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2224      	movs	r2, #36	; 0x24
 8002fa2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2101      	movs	r1, #1
 8002fb0:	438a      	bics	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f000 f830 	bl	800301c <UART_SetConfig>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e024      	b.n	8003010 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f000 f9ab 	bl	800332c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	490d      	ldr	r1, [pc, #52]	; (8003018 <HAL_UART_Init+0xa4>)
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	212a      	movs	r1, #42	; 0x2a
 8002ff2:	438a      	bics	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2101      	movs	r1, #1
 8003002:	430a      	orrs	r2, r1
 8003004:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	0018      	movs	r0, r3
 800300a:	f000 fa43 	bl	8003494 <UART_CheckIdleState>
 800300e:	0003      	movs	r3, r0
}
 8003010:	0018      	movs	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	b002      	add	sp, #8
 8003016:	bd80      	pop	{r7, pc}
 8003018:	ffffb7ff 	.word	0xffffb7ff

0800301c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003024:	231e      	movs	r3, #30
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4aaf      	ldr	r2, [pc, #700]	; (8003308 <UART_SetConfig+0x2ec>)
 800304c:	4013      	ands	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	430a      	orrs	r2, r1
 8003058:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4aaa      	ldr	r2, [pc, #680]	; (800330c <UART_SetConfig+0x2f0>)
 8003062:	4013      	ands	r3, r2
 8003064:	0019      	movs	r1, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4aa1      	ldr	r2, [pc, #644]	; (8003310 <UART_SetConfig+0x2f4>)
 800308a:	4013      	ands	r3, r2
 800308c:	0019      	movs	r1, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	430a      	orrs	r2, r1
 8003096:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a9d      	ldr	r2, [pc, #628]	; (8003314 <UART_SetConfig+0x2f8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d127      	bne.n	80030f2 <UART_SetConfig+0xd6>
 80030a2:	4b9d      	ldr	r3, [pc, #628]	; (8003318 <UART_SetConfig+0x2fc>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	2203      	movs	r2, #3
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d00d      	beq.n	80030ca <UART_SetConfig+0xae>
 80030ae:	d81b      	bhi.n	80030e8 <UART_SetConfig+0xcc>
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d014      	beq.n	80030de <UART_SetConfig+0xc2>
 80030b4:	d818      	bhi.n	80030e8 <UART_SetConfig+0xcc>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <UART_SetConfig+0xa4>
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d00a      	beq.n	80030d4 <UART_SetConfig+0xb8>
 80030be:	e013      	b.n	80030e8 <UART_SetConfig+0xcc>
 80030c0:	231f      	movs	r3, #31
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	e065      	b.n	8003196 <UART_SetConfig+0x17a>
 80030ca:	231f      	movs	r3, #31
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	2202      	movs	r2, #2
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e060      	b.n	8003196 <UART_SetConfig+0x17a>
 80030d4:	231f      	movs	r3, #31
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	2204      	movs	r2, #4
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	e05b      	b.n	8003196 <UART_SetConfig+0x17a>
 80030de:	231f      	movs	r3, #31
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	2208      	movs	r2, #8
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	e056      	b.n	8003196 <UART_SetConfig+0x17a>
 80030e8:	231f      	movs	r3, #31
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	2210      	movs	r2, #16
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e051      	b.n	8003196 <UART_SetConfig+0x17a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a89      	ldr	r2, [pc, #548]	; (800331c <UART_SetConfig+0x300>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d134      	bne.n	8003166 <UART_SetConfig+0x14a>
 80030fc:	4b86      	ldr	r3, [pc, #536]	; (8003318 <UART_SetConfig+0x2fc>)
 80030fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003100:	23c0      	movs	r3, #192	; 0xc0
 8003102:	029b      	lsls	r3, r3, #10
 8003104:	4013      	ands	r3, r2
 8003106:	22c0      	movs	r2, #192	; 0xc0
 8003108:	0292      	lsls	r2, r2, #10
 800310a:	4293      	cmp	r3, r2
 800310c:	d017      	beq.n	800313e <UART_SetConfig+0x122>
 800310e:	22c0      	movs	r2, #192	; 0xc0
 8003110:	0292      	lsls	r2, r2, #10
 8003112:	4293      	cmp	r3, r2
 8003114:	d822      	bhi.n	800315c <UART_SetConfig+0x140>
 8003116:	2280      	movs	r2, #128	; 0x80
 8003118:	0292      	lsls	r2, r2, #10
 800311a:	4293      	cmp	r3, r2
 800311c:	d019      	beq.n	8003152 <UART_SetConfig+0x136>
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	0292      	lsls	r2, r2, #10
 8003122:	4293      	cmp	r3, r2
 8003124:	d81a      	bhi.n	800315c <UART_SetConfig+0x140>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d004      	beq.n	8003134 <UART_SetConfig+0x118>
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	0252      	lsls	r2, r2, #9
 800312e:	4293      	cmp	r3, r2
 8003130:	d00a      	beq.n	8003148 <UART_SetConfig+0x12c>
 8003132:	e013      	b.n	800315c <UART_SetConfig+0x140>
 8003134:	231f      	movs	r3, #31
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e02b      	b.n	8003196 <UART_SetConfig+0x17a>
 800313e:	231f      	movs	r3, #31
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	2202      	movs	r2, #2
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e026      	b.n	8003196 <UART_SetConfig+0x17a>
 8003148:	231f      	movs	r3, #31
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	2204      	movs	r2, #4
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e021      	b.n	8003196 <UART_SetConfig+0x17a>
 8003152:	231f      	movs	r3, #31
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2208      	movs	r2, #8
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e01c      	b.n	8003196 <UART_SetConfig+0x17a>
 800315c:	231f      	movs	r3, #31
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	2210      	movs	r2, #16
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e017      	b.n	8003196 <UART_SetConfig+0x17a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6d      	ldr	r2, [pc, #436]	; (8003320 <UART_SetConfig+0x304>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d104      	bne.n	800317a <UART_SetConfig+0x15e>
 8003170:	231f      	movs	r3, #31
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	e00d      	b.n	8003196 <UART_SetConfig+0x17a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a69      	ldr	r2, [pc, #420]	; (8003324 <UART_SetConfig+0x308>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d104      	bne.n	800318e <UART_SetConfig+0x172>
 8003184:	231f      	movs	r3, #31
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
 800318c:	e003      	b.n	8003196 <UART_SetConfig+0x17a>
 800318e:	231f      	movs	r3, #31
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	2210      	movs	r2, #16
 8003194:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	429a      	cmp	r2, r3
 80031a0:	d15d      	bne.n	800325e <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80031a2:	231f      	movs	r3, #31
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d015      	beq.n	80031d8 <UART_SetConfig+0x1bc>
 80031ac:	dc18      	bgt.n	80031e0 <UART_SetConfig+0x1c4>
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d00d      	beq.n	80031ce <UART_SetConfig+0x1b2>
 80031b2:	dc15      	bgt.n	80031e0 <UART_SetConfig+0x1c4>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <UART_SetConfig+0x1a2>
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d005      	beq.n	80031c8 <UART_SetConfig+0x1ac>
 80031bc:	e010      	b.n	80031e0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031be:	f7fe fbb1 	bl	8001924 <HAL_RCC_GetPCLK1Freq>
 80031c2:	0003      	movs	r3, r0
 80031c4:	61bb      	str	r3, [r7, #24]
        break;
 80031c6:	e012      	b.n	80031ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c8:	4b57      	ldr	r3, [pc, #348]	; (8003328 <UART_SetConfig+0x30c>)
 80031ca:	61bb      	str	r3, [r7, #24]
        break;
 80031cc:	e00f      	b.n	80031ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ce:	f7fe fb1f 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80031d2:	0003      	movs	r3, r0
 80031d4:	61bb      	str	r3, [r7, #24]
        break;
 80031d6:	e00a      	b.n	80031ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d8:	2380      	movs	r3, #128	; 0x80
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	61bb      	str	r3, [r7, #24]
        break;
 80031de:	e006      	b.n	80031ee <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031e4:	231e      	movs	r3, #30
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
        break;
 80031ec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d100      	bne.n	80031f6 <UART_SetConfig+0x1da>
 80031f4:	e07b      	b.n	80032ee <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	005a      	lsls	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	085b      	lsrs	r3, r3, #1
 8003200:	18d2      	adds	r2, r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	0019      	movs	r1, r3
 8003208:	0010      	movs	r0, r2
 800320a:	f7fc ff7d 	bl	8000108 <__udivsi3>
 800320e:	0003      	movs	r3, r0
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d91c      	bls.n	8003254 <UART_SetConfig+0x238>
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	025b      	lsls	r3, r3, #9
 8003220:	429a      	cmp	r2, r3
 8003222:	d217      	bcs.n	8003254 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	b29a      	uxth	r2, r3
 8003228:	200e      	movs	r0, #14
 800322a:	183b      	adds	r3, r7, r0
 800322c:	210f      	movs	r1, #15
 800322e:	438a      	bics	r2, r1
 8003230:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	b29b      	uxth	r3, r3
 8003238:	2207      	movs	r2, #7
 800323a:	4013      	ands	r3, r2
 800323c:	b299      	uxth	r1, r3
 800323e:	183b      	adds	r3, r7, r0
 8003240:	183a      	adds	r2, r7, r0
 8003242:	8812      	ldrh	r2, [r2, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	183a      	adds	r2, r7, r0
 800324e:	8812      	ldrh	r2, [r2, #0]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	e04c      	b.n	80032ee <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003254:	231e      	movs	r3, #30
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e047      	b.n	80032ee <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800325e:	231f      	movs	r3, #31
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d015      	beq.n	8003294 <UART_SetConfig+0x278>
 8003268:	dc18      	bgt.n	800329c <UART_SetConfig+0x280>
 800326a:	2b04      	cmp	r3, #4
 800326c:	d00d      	beq.n	800328a <UART_SetConfig+0x26e>
 800326e:	dc15      	bgt.n	800329c <UART_SetConfig+0x280>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <UART_SetConfig+0x25e>
 8003274:	2b02      	cmp	r3, #2
 8003276:	d005      	beq.n	8003284 <UART_SetConfig+0x268>
 8003278:	e010      	b.n	800329c <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800327a:	f7fe fb53 	bl	8001924 <HAL_RCC_GetPCLK1Freq>
 800327e:	0003      	movs	r3, r0
 8003280:	61bb      	str	r3, [r7, #24]
        break;
 8003282:	e012      	b.n	80032aa <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003284:	4b28      	ldr	r3, [pc, #160]	; (8003328 <UART_SetConfig+0x30c>)
 8003286:	61bb      	str	r3, [r7, #24]
        break;
 8003288:	e00f      	b.n	80032aa <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328a:	f7fe fac1 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 800328e:	0003      	movs	r3, r0
 8003290:	61bb      	str	r3, [r7, #24]
        break;
 8003292:	e00a      	b.n	80032aa <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	61bb      	str	r3, [r7, #24]
        break;
 800329a:	e006      	b.n	80032aa <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032a0:	231e      	movs	r3, #30
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
        break;
 80032a8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01e      	beq.n	80032ee <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	085a      	lsrs	r2, r3, #1
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	18d2      	adds	r2, r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0019      	movs	r1, r3
 80032c0:	0010      	movs	r0, r2
 80032c2:	f7fc ff21 	bl	8000108 <__udivsi3>
 80032c6:	0003      	movs	r3, r0
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b0f      	cmp	r3, #15
 80032d0:	d909      	bls.n	80032e6 <UART_SetConfig+0x2ca>
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	025b      	lsls	r3, r3, #9
 80032d8:	429a      	cmp	r2, r3
 80032da:	d204      	bcs.n	80032e6 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	60da      	str	r2, [r3, #12]
 80032e4:	e003      	b.n	80032ee <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80032e6:	231e      	movs	r3, #30
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032fa:	231e      	movs	r3, #30
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	781b      	ldrb	r3, [r3, #0]
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b008      	add	sp, #32
 8003306:	bd80      	pop	{r7, pc}
 8003308:	efff69f3 	.word	0xefff69f3
 800330c:	ffffcfff 	.word	0xffffcfff
 8003310:	fffff4ff 	.word	0xfffff4ff
 8003314:	40013800 	.word	0x40013800
 8003318:	40021000 	.word	0x40021000
 800331c:	40004400 	.word	0x40004400
 8003320:	40004800 	.word	0x40004800
 8003324:	40004c00 	.word	0x40004c00
 8003328:	007a1200 	.word	0x007a1200

0800332c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	2201      	movs	r2, #1
 800333a:	4013      	ands	r3, r2
 800333c:	d00b      	beq.n	8003356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a4a      	ldr	r2, [pc, #296]	; (8003470 <UART_AdvFeatureConfig+0x144>)
 8003346:	4013      	ands	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2202      	movs	r2, #2
 800335c:	4013      	ands	r3, r2
 800335e:	d00b      	beq.n	8003378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4a43      	ldr	r2, [pc, #268]	; (8003474 <UART_AdvFeatureConfig+0x148>)
 8003368:	4013      	ands	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	2204      	movs	r2, #4
 800337e:	4013      	ands	r3, r2
 8003380:	d00b      	beq.n	800339a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a3b      	ldr	r2, [pc, #236]	; (8003478 <UART_AdvFeatureConfig+0x14c>)
 800338a:	4013      	ands	r3, r2
 800338c:	0019      	movs	r1, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2208      	movs	r2, #8
 80033a0:	4013      	ands	r3, r2
 80033a2:	d00b      	beq.n	80033bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4a34      	ldr	r2, [pc, #208]	; (800347c <UART_AdvFeatureConfig+0x150>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	0019      	movs	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	2210      	movs	r2, #16
 80033c2:	4013      	ands	r3, r2
 80033c4:	d00b      	beq.n	80033de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a2c      	ldr	r2, [pc, #176]	; (8003480 <UART_AdvFeatureConfig+0x154>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	0019      	movs	r1, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	2220      	movs	r2, #32
 80033e4:	4013      	ands	r3, r2
 80033e6:	d00b      	beq.n	8003400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4a25      	ldr	r2, [pc, #148]	; (8003484 <UART_AdvFeatureConfig+0x158>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	0019      	movs	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	2240      	movs	r2, #64	; 0x40
 8003406:	4013      	ands	r3, r2
 8003408:	d01d      	beq.n	8003446 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a1d      	ldr	r2, [pc, #116]	; (8003488 <UART_AdvFeatureConfig+0x15c>)
 8003412:	4013      	ands	r3, r2
 8003414:	0019      	movs	r1, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	035b      	lsls	r3, r3, #13
 800342a:	429a      	cmp	r2, r3
 800342c:	d10b      	bne.n	8003446 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a15      	ldr	r2, [pc, #84]	; (800348c <UART_AdvFeatureConfig+0x160>)
 8003436:	4013      	ands	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	4013      	ands	r3, r2
 800344e:	d00b      	beq.n	8003468 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <UART_AdvFeatureConfig+0x164>)
 8003458:	4013      	ands	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	605a      	str	r2, [r3, #4]
  }
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b002      	add	sp, #8
 800346e:	bd80      	pop	{r7, pc}
 8003470:	fffdffff 	.word	0xfffdffff
 8003474:	fffeffff 	.word	0xfffeffff
 8003478:	fffbffff 	.word	0xfffbffff
 800347c:	ffff7fff 	.word	0xffff7fff
 8003480:	ffffefff 	.word	0xffffefff
 8003484:	ffffdfff 	.word	0xffffdfff
 8003488:	ffefffff 	.word	0xffefffff
 800348c:	ff9fffff 	.word	0xff9fffff
 8003490:	fff7ffff 	.word	0xfff7ffff

08003494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af02      	add	r7, sp, #8
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2280      	movs	r2, #128	; 0x80
 80034a0:	2100      	movs	r1, #0
 80034a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034a4:	f7fd fadc 	bl	8000a60 <HAL_GetTick>
 80034a8:	0003      	movs	r3, r0
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2208      	movs	r2, #8
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d10c      	bne.n	80034d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2280      	movs	r2, #128	; 0x80
 80034be:	0391      	lsls	r1, r2, #14
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4a17      	ldr	r2, [pc, #92]	; (8003520 <UART_CheckIdleState+0x8c>)
 80034c4:	9200      	str	r2, [sp, #0]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f000 f82c 	bl	8003524 <UART_WaitOnFlagUntilTimeout>
 80034cc:	1e03      	subs	r3, r0, #0
 80034ce:	d001      	beq.n	80034d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e021      	b.n	8003518 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2204      	movs	r2, #4
 80034dc:	4013      	ands	r3, r2
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d10c      	bne.n	80034fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	03d1      	lsls	r1, r2, #15
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <UART_CheckIdleState+0x8c>)
 80034ec:	9200      	str	r2, [sp, #0]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f000 f818 	bl	8003524 <UART_WaitOnFlagUntilTimeout>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d001      	beq.n	80034fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e00d      	b.n	8003518 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2274      	movs	r2, #116	; 0x74
 8003512:	2100      	movs	r1, #0
 8003514:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b004      	add	sp, #16
 800351e:	bd80      	pop	{r7, pc}
 8003520:	01ffffff 	.word	0x01ffffff

08003524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b094      	sub	sp, #80	; 0x50
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	1dfb      	adds	r3, r7, #7
 8003532:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003534:	e0a3      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003538:	3301      	adds	r3, #1
 800353a:	d100      	bne.n	800353e <UART_WaitOnFlagUntilTimeout+0x1a>
 800353c:	e09f      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353e:	f7fd fa8f 	bl	8000a60 <HAL_GetTick>
 8003542:	0002      	movs	r2, r0
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800354a:	429a      	cmp	r2, r3
 800354c:	d302      	bcc.n	8003554 <UART_WaitOnFlagUntilTimeout+0x30>
 800354e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003550:	2b00      	cmp	r3, #0
 8003552:	d13d      	bne.n	80035d0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003554:	f3ef 8310 	mrs	r3, PRIMASK
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355c:	647b      	str	r3, [r7, #68]	; 0x44
 800355e:	2301      	movs	r3, #1
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	f383 8810 	msr	PRIMASK, r3
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	494c      	ldr	r1, [pc, #304]	; (80036a8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003576:	400a      	ands	r2, r1
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	f383 8810 	msr	PRIMASK, r3
}
 8003584:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003586:	f3ef 8310 	mrs	r3, PRIMASK
 800358a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358e:	643b      	str	r3, [r7, #64]	; 0x40
 8003590:	2301      	movs	r3, #1
 8003592:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003596:	f383 8810 	msr	PRIMASK, r3
}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2101      	movs	r1, #1
 80035a8:	438a      	bics	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b2:	f383 8810 	msr	PRIMASK, r3
}
 80035b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2274      	movs	r2, #116	; 0x74
 80035c8:	2100      	movs	r1, #0
 80035ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e067      	b.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2204      	movs	r2, #4
 80035d8:	4013      	ands	r3, r2
 80035da:	d050      	beq.n	800367e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	401a      	ands	r2, r3
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d146      	bne.n	800367e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	0112      	lsls	r2, r2, #4
 80035f8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fa:	f3ef 8310 	mrs	r3, PRIMASK
 80035fe:	613b      	str	r3, [r7, #16]
  return(result);
 8003600:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003604:	2301      	movs	r3, #1
 8003606:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f383 8810 	msr	PRIMASK, r3
}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4923      	ldr	r1, [pc, #140]	; (80036a8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800361c:	400a      	ands	r2, r1
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003622:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f383 8810 	msr	PRIMASK, r3
}
 800362a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362c:	f3ef 8310 	mrs	r3, PRIMASK
 8003630:	61fb      	str	r3, [r7, #28]
  return(result);
 8003632:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003634:	64bb      	str	r3, [r7, #72]	; 0x48
 8003636:	2301      	movs	r3, #1
 8003638:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	f383 8810 	msr	PRIMASK, r3
}
 8003640:	46c0      	nop			; (mov r8, r8)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2101      	movs	r1, #1
 800364e:	438a      	bics	r2, r1
 8003650:	609a      	str	r2, [r3, #8]
 8003652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	f383 8810 	msr	PRIMASK, r3
}
 800365c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	2120      	movs	r1, #32
 8003670:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2274      	movs	r2, #116	; 0x74
 8003676:	2100      	movs	r1, #0
 8003678:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e010      	b.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	4013      	ands	r3, r2
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	425a      	negs	r2, r3
 800368e:	4153      	adcs	r3, r2
 8003690:	b2db      	uxtb	r3, r3
 8003692:	001a      	movs	r2, r3
 8003694:	1dfb      	adds	r3, r7, #7
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d100      	bne.n	800369e <UART_WaitOnFlagUntilTimeout+0x17a>
 800369c:	e74b      	b.n	8003536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b014      	add	sp, #80	; 0x50
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	fffffe5f 	.word	0xfffffe5f

080036ac <__libc_init_array>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	2600      	movs	r6, #0
 80036b0:	4d0c      	ldr	r5, [pc, #48]	; (80036e4 <__libc_init_array+0x38>)
 80036b2:	4c0d      	ldr	r4, [pc, #52]	; (80036e8 <__libc_init_array+0x3c>)
 80036b4:	1b64      	subs	r4, r4, r5
 80036b6:	10a4      	asrs	r4, r4, #2
 80036b8:	42a6      	cmp	r6, r4
 80036ba:	d109      	bne.n	80036d0 <__libc_init_array+0x24>
 80036bc:	2600      	movs	r6, #0
 80036be:	f000 f821 	bl	8003704 <_init>
 80036c2:	4d0a      	ldr	r5, [pc, #40]	; (80036ec <__libc_init_array+0x40>)
 80036c4:	4c0a      	ldr	r4, [pc, #40]	; (80036f0 <__libc_init_array+0x44>)
 80036c6:	1b64      	subs	r4, r4, r5
 80036c8:	10a4      	asrs	r4, r4, #2
 80036ca:	42a6      	cmp	r6, r4
 80036cc:	d105      	bne.n	80036da <__libc_init_array+0x2e>
 80036ce:	bd70      	pop	{r4, r5, r6, pc}
 80036d0:	00b3      	lsls	r3, r6, #2
 80036d2:	58eb      	ldr	r3, [r5, r3]
 80036d4:	4798      	blx	r3
 80036d6:	3601      	adds	r6, #1
 80036d8:	e7ee      	b.n	80036b8 <__libc_init_array+0xc>
 80036da:	00b3      	lsls	r3, r6, #2
 80036dc:	58eb      	ldr	r3, [r5, r3]
 80036de:	4798      	blx	r3
 80036e0:	3601      	adds	r6, #1
 80036e2:	e7f2      	b.n	80036ca <__libc_init_array+0x1e>
 80036e4:	08003754 	.word	0x08003754
 80036e8:	08003754 	.word	0x08003754
 80036ec:	08003754 	.word	0x08003754
 80036f0:	08003758 	.word	0x08003758

080036f4 <memset>:
 80036f4:	0003      	movs	r3, r0
 80036f6:	1882      	adds	r2, r0, r2
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d100      	bne.n	80036fe <memset+0xa>
 80036fc:	4770      	bx	lr
 80036fe:	7019      	strb	r1, [r3, #0]
 8003700:	3301      	adds	r3, #1
 8003702:	e7f9      	b.n	80036f8 <memset+0x4>

08003704 <_init>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr

08003710 <_fini>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003716:	bc08      	pop	{r3}
 8003718:	469e      	mov	lr, r3
 800371a:	4770      	bx	lr
